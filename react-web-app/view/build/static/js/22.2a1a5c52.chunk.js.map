{"version":3,"sources":["components/header/MatAppbar.js","components/header/Header.js","components/sidebar/MatSideBar.js","assets/icons/dashboard-icon.svg","components/scheduledMeetings/scheduledMeets.js","components/evms/evmsTable.js","components/projects-table/projectsTable.js","components/assignedProjects/assignedProjects.js","pages/dashboard/Dashboard.js","pages/wbs-board/wbs-modal.js"],"names":["styled","MuiAppBar","shouldForwardProp","prop","theme","open","backgroundColor","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","marginLeft","drawerWidth","width","enteringScreen","position","borderRadius","shape","alpha","palette","common","white","marginRight","spacing","breakpoints","up","padding","height","pointerEvents","display","alignItems","justifyContent","InputBase","color","paddingLeft","openedMixin","overflowX","closedMixin","mixins","toolbar","marginBottom","MuiDrawer","flexShrink","whiteSpace","boxSizing","makeStyles","root","maxWidth","nested","ScheduleMeetings","history","useHistory","dispatch","useDispatch","meeting","useSelector","state","meetings","data","React","useEffect","fetchMeetingList","sessionStorage","getItem","USER_ID","className","undefined","slice","map","item","idx","room_id","id","agenda","medium","start_time","onClick","push","pathname","EvmsView","evmsList","calculateCPI","ev","ac","Math","abs","console","log","Array","from","project","task_delivery_order","title","sub_task","earned_value","actual_cost","planned_value","ProjectsTableDashboard","projects","work_package_number","planned_hours","remaining_hours","planned_delivery_date","AssignedProjectsDashboard","wbs","temp_data","forEach","element","assignee","useState","updatedData","setUpdatedData","modal","setModal","modalData","setModalData","value","API","get","then","res","find","description","end_date","show","onClose","fetchWbsThunk","toggle","timeCardList","Dashboard","location","useLocation","useSnackbar","enqueueSnackbar","closeSnackbar","window","scrollTo","variant","has_permission","memo","WbsModal","props","deliverableView","setDeliverableView","hrsWorked","setHrsWorked","formWbsUpdate","useFormik","initialValues","status","start_date","hours_worked","progress","comments","deliverable","date_updated","actual_work_done","validateOnChange","validateOnBlur","validate","values","errors","onSubmit","put","success","fetchProjectsForPMThunk","fetchProjectsThunk","swal","text","message","icon","closeOnBackdrop","closeButton","task_title","name","onChange","handleChange","style","fontSize","type","e","setFieldValue","target","length","disabled","max","isSubmitting","isValidating","handleSubmit","first_name","last_name","reporter","hours_today"],"mappings":"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","file":"static/js/22.2a1a5c52.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { styled, alpha } from '@material-ui/core/styles';\r\n//import AppBar from '@material-ui/core/AppBar';\r\nimport MuiAppBar from '@material-ui/core/AppBar';\r\nimport Box from '@material-ui/core/Box';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport { drawerWidth } from '../../Config';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeState } from '../../store/slices/DrawerSlice';\r\nimport { useHistory } from 'react-router-dom';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nconst AppBar = styled(MuiAppBar, {\r\n  shouldForwardProp: (prop) => prop !== 'open',\r\n})(({ theme, open }) => ({\r\n  backgroundColor:\"#fff\",\r\n  zIndex: theme.zIndex.drawer + 1,\r\n  transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n  }),\r\n  ...(open && {\r\n      marginLeft: drawerWidth,\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      transition: theme.transitions.create(['width', 'margin'], {\r\n          easing: theme.transitions.easing.sharp,\r\n          duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n  }),\r\n}));\r\nconst Search = styled('div')(({ theme }) => ({\r\n  position: 'relative',\r\n  borderRadius: theme.shape.borderRadius,\r\n  backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n  '&:hover': {\r\n    backgroundColor: alpha(theme.palette.common.white, 0.25),\r\n  },\r\n  marginRight: theme.spacing(2),\r\n  marginLeft: 0,\r\n  width: '100%',\r\n  [theme.breakpoints.up('sm')]: {\r\n    marginLeft: theme.spacing(3),\r\n    width: 'auto',\r\n  },\r\n}));\r\n\r\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\r\n  padding: theme.spacing(0, 2),\r\n  height: '100%',\r\n  position: 'absolute',\r\n  pointerEvents: 'none',\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  justifyContent: 'center',\r\n}));\r\n\r\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  color: 'inherit',\r\n  '& .MuiInputBase-input': {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      width: '20ch',\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function MatAppbar() {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\r\n  const open = useSelector(state=>state.drawer.open)\r\n  const isMenuOpen = Boolean(anchorEl);\r\n  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\r\n  const dispatch = useDispatch()\r\n  let history = useHistory()\r\n  const handleProfileMenuOpen = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleMobileMenuClose = () => {\r\n    setMobileMoreAnchorEl(null);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n    handleMobileMenuClose();\r\n  };\r\n  function logout(){\r\n    sessionStorage.clear()\r\n    history.push('/')\r\n  }\r\n  const handleMobileMenuOpen = (event) => {\r\n    setMobileMoreAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleDrawerOpen = () => {\r\n    dispatch(changeState(true))\r\n  };\r\n  const menuId = 'primary-search-account-menu';\r\n  const renderMenu = (\r\n    <Menu\r\n      anchorEl={anchorEl}\r\n      anchorOrigin={{\r\n        vertical: 'top',\r\n        horizontal: 'right',\r\n      }}\r\n      id={menuId}\r\n      keepMounted\r\n      transformOrigin={{\r\n        vertical: 'top',\r\n        horizontal: 'right',\r\n      }}\r\n      open={isMenuOpen}\r\n      onClose={handleMenuClose}\r\n    >\r\n      <MenuItem onClick={handleMenuClose}>Profile</MenuItem>\r\n      <MenuItem onClick={()=>{logout()}}>Logout</MenuItem>\r\n    </Menu>\r\n  );\r\n\r\n  const mobileMenuId = 'primary-search-account-menu-mobile';\r\n  const renderMobileMenu = (\r\n    <Menu\r\n      anchorEl={mobileMoreAnchorEl}\r\n      anchorOrigin={{\r\n        vertical: 'top',\r\n        horizontal: 'right',\r\n      }}\r\n      id={mobileMenuId}\r\n      keepMounted\r\n      transformOrigin={{\r\n        vertical: 'top',\r\n        horizontal: 'right',\r\n      }}\r\n      open={isMobileMenuOpen}\r\n      onClose={handleMobileMenuClose}\r\n    >\r\n      <MenuItem>\r\n        <IconButton size=\"large\" aria-label=\"show 4 new mails\" color=\"inherit\">\r\n          <Badge badgeContent={4} color=\"error\">\r\n            <MailIcon />\r\n          </Badge>\r\n        </IconButton>\r\n        <p>Messages</p>\r\n      </MenuItem>\r\n      <MenuItem>\r\n        <IconButton\r\n          size=\"large\"\r\n          aria-label=\"show 17 new notifications\"\r\n          color=\"inherit\"\r\n        >\r\n          <Badge badgeContent={17} color=\"error\">\r\n            <NotificationsIcon />\r\n          </Badge>\r\n        </IconButton>\r\n        <p>Notifications</p>\r\n      </MenuItem>\r\n      <MenuItem onClick={handleProfileMenuOpen}>\r\n        <IconButton\r\n          size=\"large\"\r\n          aria-label=\"account of current user\"\r\n          aria-controls=\"primary-search-account-menu\"\r\n          aria-haspopup=\"true\"\r\n          color=\"inherit\"\r\n        >\r\n          <AccountCircle />\r\n        </IconButton>\r\n        <p>Profile</p>\r\n      </MenuItem>\r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <AppBar position=\"fixed\" open={open}>\r\n        <Toolbar>\r\n          <IconButton\r\n            size=\"large\"\r\n            edge=\"start\"\r\n            color=\"default\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            sx={{\r\n                marginRight: '36px',\r\n                ...(open && { display: 'none' }),\r\n            }}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          {/* <Typography\r\n            variant=\"h6\"\r\n            noWrap\r\n            component=\"div\"\r\n            sx={{ display: { xs: 'none', sm: 'block' } }}\r\n            color=\"default\"\r\n          >\r\n            Material-UI\r\n          </Typography> */}\r\n          {/* <Search>\r\n            <SearchIconWrapper>\r\n              <SearchIcon />\r\n            </SearchIconWrapper>\r\n            <StyledInputBase\r\n              placeholder=\"Search…\"\r\n              inputProps={{ 'aria-label': 'search' }}\r\n            />\r\n          </Search> */}\r\n          <Box sx={{ flexGrow: 1 }} />\r\n          <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\r\n            <IconButton size=\"large\" aria-label=\"show 4 new mails\" color=\"default\">\r\n              <Badge badgeContent={4} color=\"error\">\r\n                <MailIcon />\r\n              </Badge>\r\n            </IconButton>\r\n            <IconButton\r\n              size=\"large\"\r\n              aria-label=\"show 17 new notifications\"\r\n              color=\"default\"\r\n            >\r\n              <Badge badgeContent={17} color=\"error\">\r\n                <NotificationsIcon />\r\n              </Badge>\r\n            </IconButton>\r\n            <IconButton\r\n              size=\"large\"\r\n              edge=\"end\"\r\n              aria-label=\"account of current user\"\r\n              aria-controls={menuId}\r\n              aria-haspopup=\"true\"\r\n              onClick={handleProfileMenuOpen}\r\n              color=\"default\"\r\n            >\r\n              <AccountCircle />\r\n            </IconButton>\r\n          </Box>\r\n          <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\r\n            <IconButton\r\n              size=\"large\"\r\n              aria-label=\"show more\"\r\n              aria-controls={mobileMenuId}\r\n              aria-haspopup=\"true\"\r\n              onClick={handleMobileMenuOpen}\r\n              color=\"default\"\r\n            >\r\n              <MoreIcon />\r\n            </IconButton>\r\n          </Box>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {renderMobileMenu}\r\n      {renderMenu}\r\n    </div>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport { styled } from '@material-ui/core/styles';\r\nimport MuiAppBar from '@material-ui/core/AppBar';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeState } from '../../store/slices/DrawerSlice';\r\nimport { changeUserDropdownMenuState } from '../../store/slices/ConfigSlice';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { drawerWidth } from '../../Config';\r\nimport MatAppbar from './MatAppbar';\r\n\r\nconst AppBar = styled(MuiAppBar, {\r\n    shouldForwardProp: (prop) => prop !== 'open',\r\n})(({ theme, open }) => ({\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    ...(open && {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    }),\r\n}));\r\n\r\nexport default function Header() {\r\n    const [anchorEl, setAnchorEl] = React.useState(null)\r\n    const open = useSelector(state => state.drawer.open)\r\n    const user_menu = useSelector(state=>state.config.user_dropdown_header_menu_show)\r\n    const dispatch = useDispatch()\r\n    let history = useHistory()\r\n    const handleDrawerOpen = () => {\r\n        dispatch(changeState(true))\r\n    };\r\n    const handleClose = () => {\r\n        dispatch(changeUserDropdownMenuState(false))\r\n        setAnchorEl(null);\r\n    };\r\n    \r\n    return (\r\n        // <React.Fragment>\r\n        //     <AppBar position=\"fixed\" open={open}>\r\n        //         <Grid\r\n        //             container\r\n        //             direction=\"row\"\r\n        //             justifyContent=\"space-between\"\r\n        //             alignItems=\"center\"\r\n        //             spacing={{ xs: 2, md: 3 }}\r\n        //             columns={{ xs: 4, sm: 8, md: 12 }}\r\n        //         >\r\n        //             <Grid item xs={11} md={11}>\r\n        //                 <Toolbar sx={{ justifyContent: 'space-between' }}>\r\n        //                     <IconButton\r\n        //                         color=\"inherit\"\r\n        //                         aria-label=\"open drawer\"\r\n        //                         onClick={handleDrawerOpen}\r\n        //                         edge=\"start\"\r\n        //                         sx={{\r\n        //                             marginRight: '36px',\r\n        //                             ...(open && { display: 'none' }),\r\n        //                         }}\r\n        //                     >\r\n        //                         <MenuIcon />\r\n        //                     </IconButton>\r\n        //                     {/* <Typography variant=\"h6\" noWrap component=\"div\">\r\n        //                     Header\r\n        //                 </Typography> */}\r\n        //                 </Toolbar>\r\n        //             </Grid>\r\n        //             <Grid item xs={1} md={1} justifyContent=\"flex-end\">\r\n        //                 <ImageAvatars />\r\n        //             </Grid>\r\n        //         </Grid>\r\n        //         <Menu\r\n        //             anchorEl={anchorEl}\r\n        //             open={user_menu}\r\n        //             onClick={handleClose}\r\n        //             onClose={handleClose}\r\n        //             PaperProps={{\r\n        //                 elevation: 0,\r\n        //                 sx: {\r\n        //                     overflow: 'visible',\r\n        //                     filter: 'drop-shadow(0px 2px 8px rgba(0,0,0,0.32))',\r\n        //                     mt: 1.5,\r\n        //                     '& .MuiAvatar-root': {\r\n        //                         width: 32,\r\n        //                         height: 32,\r\n        //                         ml: -0.5,\r\n        //                         mr: 1,\r\n        //                     },\r\n        //                     '&:before': {\r\n        //                         content: '\"\"',\r\n        //                         display: 'block',\r\n        //                         position: 'absolute',\r\n        //                         top: 0,\r\n        //                         right: 14,\r\n        //                         width: 10,\r\n        //                         height: 10,\r\n        //                         bgcolor: 'background.paper',\r\n        //                         transform: 'translateY(-50%) rotate(45deg)',\r\n        //                         zIndex: 0,\r\n        //                     },\r\n        //                 },\r\n        //             }}\r\n        //             transformOrigin={{ horizontal: 'right', vertical: 'top' }}\r\n        //             anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\r\n        //         >\r\n        //             {/* <MenuItem>\r\n        //                 <Avatar /> Profile\r\n        //             </MenuItem>\r\n        //             <MenuItem>\r\n        //                 <Avatar /> My account\r\n        //             </MenuItem>\r\n        //             <Divider />\r\n        //             <MenuItem>\r\n        //                 <ListItemIcon>\r\n        //                     <PersonAdd fontSize=\"small\" />\r\n        //                 </ListItemIcon>\r\n        //                 Add another account\r\n        //             </MenuItem> */}\r\n        //             <MenuItem>\r\n        //                 <ListItemIcon>\r\n        //                     <Settings fontSize=\"small\" />\r\n        //                 </ListItemIcon>\r\n        //                 Settings\r\n        //             </MenuItem>\r\n        //             <MenuItem onClick={()=>{logout()}}>\r\n        //                 <ListItemIcon>\r\n        //                     <Logout fontSize=\"small\" />\r\n        //                 </ListItemIcon>\r\n        //                 Logout\r\n        //             </MenuItem>\r\n        //         </Menu>\r\n        //     </AppBar>\r\n        // </React.Fragment>\r\n        <MatAppbar/>\r\n    );\r\n}\r\n","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { styled, useTheme } from \"@material-ui/core/styles\";\r\nimport MuiDrawer from \"@material-ui/core/Drawer\";\r\nimport List from \"@material-ui/core/List\";\r\nimport StarBorder from \"@material-ui/icons/StarBorder\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { changeState } from \"../../store/slices/DrawerSlice\";\r\nimport { drawerWidth } from \"../../Config\";\r\nimport DashBoardIconFigma from \"../../assets/icons/dashboard-icon.svg\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\nimport RadioButtonCheckedIcon from \"@material-ui/icons/RadioButtonChecked\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport \"./MatSideBar.css\";\r\nconst openedMixin = (theme) => ({\r\n  width: drawerWidth,\r\n\r\n  transition: theme.transitions.create(\"width\", {\r\n    easing: theme.transitions.easing.sharp,\r\n    duration: theme.transitions.duration.enteringScreen,\r\n  }),\r\n  overflowX: \"hidden\",\r\n});\r\n\r\nconst closedMixin = (theme) => ({\r\n  transition: theme.transitions.create(\"width\", {\r\n    easing: theme.transitions.easing.sharp,\r\n    duration: theme.transitions.duration.leavingScreen,\r\n  }),\r\n  overflowX: \"hidden\",\r\n  width: `calc(${theme.spacing(7)} + 1px)`,\r\n  [theme.breakpoints.up(\"sm\")]: {\r\n    width: `calc(${theme.spacing(8)} + 1px)`,\r\n  },\r\n});\r\n\r\nconst DrawerHeader = styled(\"div\")(({ theme }) => ({\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"flex-end\",\r\n  padding: theme.spacing(0, 1),\r\n  // necessary for content to be below app bar\r\n  ...theme.mixins.toolbar,\r\n}));\r\nconst DrawerFooter = styled(\"div\")(({ theme }) => ({\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"flex-end\",\r\n  marginBottom: \"0px\",\r\n  padding: theme.spacing(0, 1),\r\n  // necessary for content to be below app bar\r\n  ...theme.mixins.toolbar,\r\n}));\r\n\r\nconst Drawer = styled(MuiDrawer, {\r\n\r\n  shouldForwardProp: (prop) => prop !== \"open\",\r\n})(({ theme, open }) => ({\r\n  width: drawerWidth,\r\n  flexShrink: 0,\r\n  whiteSpace: \"nowrap\",\r\n  boxSizing: \"border-box\",\r\n  ...(open && {\r\n    ...openedMixin(theme),\r\n    \"& .MuiDrawer-paper\": openedMixin(theme),\r\n  }),\r\n  ...(!open && {\r\n    ...closedMixin(theme),\r\n    \"& .MuiDrawer-paper\": closedMixin(theme),\r\n  }),\r\n}));\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n  root: {\r\n    \r\n    width: \"100%\",\r\n    maxWidth: 360,\r\n    backgroundColor: \"theme.palette.background.paper\",\r\n  },\r\n  nested: {\r\n    paddingLeft: \" theme.spacing(4)\",\r\n  },\r\n\r\n}));\r\nexport default function MatSideBar(props) {\r\n  const { window } = props;\r\n  const [mobileOpen, setMobileOpen] = useState(false);\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const open = useSelector((state) => state.drawer.open);\r\n  const dispatch = useDispatch();\r\n  let history = useHistory();\r\n  let location = useLocation();\r\n  const [opening, setOpen] = useState(true);\r\n  const[opening2,setOpen2]=useState(true);\r\n  const handleClickProjects = () => {\r\n    setOpen(!opening);\r\n  };\r\n  const handleClickWBS=()=>{\r\n    setOpen2(!opening2);\r\n  }\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    dispatch(changeState(open ? false : true));\r\n  };\r\n  React.useEffect(() => {\r\n    console.log(location.pathname);\r\n  }, [location]);\r\n  return (\r\n   <>\r\n   {/**Desktop menu */}\r\n    <Drawer variant=\"permanent\" open={open} \r\n     className=\"custom-drawer\">\r\n      <DrawerHeader>\r\n        <IconButton onClick={handleDrawerClose}>\r\n          {/* Logo */}\r\n          {open ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n        </IconButton>\r\n      </DrawerHeader>\r\n\r\n      <List>\r\n        <ListItem\r\n          className=\"custom-list-item\"\r\n          button\r\n          onClick={() => {\r\n            history.push(\"/dashboard\");\r\n          }}\r\n          selected={location.pathName == \"/dashboard\" ? true : false}\r\n        >\r\n          <ListItemIcon>\r\n            {/* <DashboardRoundedIcon/> */}\r\n            {/* <Icon><img src={DashBoardIconFigma}/></Icon> */}\r\n            <img src={DashBoardIconFigma} />\r\n          </ListItemIcon>\r\n          <ListItemText primary={\"Dashboard\"} />\r\n        </ListItem>\r\n        {/**Projects */}\r\n        <ListItem button onClick={handleClickProjects}>\r\n          {/* <ListItem button onClick={()=>{history.push('/dashboard/ongoing-project-details-view')}} selected={location.pathName == \"/dashboard/ongoing-project-details-view\"?true:false}> */}\r\n\r\n          <ListItemIcon>\r\n            {/* <DashboardRoundedIcon/> */}\r\n            {/* <Icon><img src={DashBoardIconFigma}/></Icon> */}\r\n            <img src={DashBoardIconFigma} />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Projects\" />\r\n          {opening ? <ExpandMore /> : <ExpandLess />}\r\n        </ListItem>\r\n        {/*Projects sub routes*/}\r\n        <Collapse in={!opening} timeout=\"auto\" unmountOnExit>\r\n          <List component=\"div\" disablePadding>\r\n            {/**Ongoing project */}\r\n            <ListItem\r\n              button\r\n              className={classes.nested}\r\n              onClick={() => {\r\n                history.push(\r\n                  \"/dashboard/Projects/ongoing-project-details-view\"\r\n                );\r\n              }}\r\n              selected={\r\n                location.pathName ==\r\n                \"/dashboard/Projects/ongoing-project-details-view\"\r\n                  ? true\r\n                  : false\r\n              }\r\n            >\r\n              <ListItemIcon>\r\n                <RadioButtonCheckedIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Ongoing\" />\r\n            </ListItem>\r\n            {/**Completed Project */}\r\n            <ListItem\r\n              button\r\n              className={classes.nested}\r\n              onClick={() => {\r\n                history.push(\"/dashboard/Projects/completed-projects\");\r\n              }}\r\n              selected={\r\n                location.pathName == \"/dashboard/Projects/completed-projects\"\r\n                  ? true\r\n                  : false\r\n              }\r\n            >\r\n              <ListItemIcon>\r\n                <RadioButtonCheckedIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Completed\" />\r\n            </ListItem>\r\n            {/**Create a new project */}\r\n            <ListItem\r\n              button\r\n              className={classes.nested}\r\n              onClick={() => {\r\n                history.push(\"/dashboard/Projects/create-new-project\");\r\n              }}\r\n              selected={\r\n                location.pathName == \"/dashboard/Projects/create-new-project\"\r\n                  ? true\r\n                  : false\r\n              }\r\n            >\r\n              <ListItemIcon>\r\n                <RadioButtonCheckedIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Create Project\" />\r\n            </ListItem>\r\n          </List>\r\n        </Collapse>\r\n        {/**Meetings */}\r\n        <ListItem\r\n          button\r\n          onClick={() => {\r\n            history.push(\"/dashboard/meetings\");\r\n          }}\r\n          selected={location.pathName == \"/dashboard/meetings\" ? true : false}\r\n        >\r\n          <ListItemIcon>\r\n            <img src={DashBoardIconFigma} />\r\n          </ListItemIcon>\r\n          <ListItemText primary={\"Meetings\"} />\r\n        </ListItem>\r\n        {/*WBS*/}\r\n        <ListItem\r\n          button\r\n         onClick={handleClickWBS}\r\n        >\r\n          <ListItemIcon>\r\n            <img src={DashBoardIconFigma} />\r\n          </ListItemIcon>\r\n          <ListItemText primary={\"WBS\"} />\r\n          {opening2 ? <ExpandMore /> : <ExpandLess />}\r\n        </ListItem>\r\n        {/**WBS Subroutes */}\r\n        <Collapse in={!opening2} timeout=\"auto\" unmountOnExit>\r\n          <List component=\"div\" disablePadding>\r\n            {/**Create WBS */}\r\n            <ListItem\r\n              button\r\n              className={classes.nested}\r\n              onClick={() => {\r\n                history.push(\r\n                  \"/dashboard/WBS/create-wbs\"\r\n                );\r\n              }}\r\n              selected={\r\n                location.pathName ==\r\n                \"/dashboard/WBS/create-wbs\"\r\n                  ? true\r\n                  : false\r\n              }\r\n            >\r\n              <ListItemIcon>\r\n                <RadioButtonCheckedIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Create WBS\" />\r\n            </ListItem>\r\n            {/**BOARD */}\r\n            <ListItem\r\n              button\r\n              className={classes.nested}\r\n              onClick={() => {\r\n                history.push(\"/dashboard/WBS/board\");\r\n              }}\r\n              selected={\r\n                location.pathName == \"/dashboard/WBS/board\"\r\n                  ? true\r\n                  : false\r\n              }\r\n            >\r\n              <ListItemIcon>\r\n                <RadioButtonCheckedIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Board\" />\r\n            </ListItem>\r\n          \r\n          </List>\r\n        </Collapse>\r\n        {/**EVMS */}\r\n        <ListItem\r\n          button\r\n          onClick={() => {\r\n            history.push(\"/dashboard/EVMS\");\r\n          }}\r\n          selected={location.pathName == \"/dashboard/EVMS\" ? true : false}\r\n        >\r\n          <ListItemIcon>\r\n            <img src={DashBoardIconFigma} />\r\n          </ListItemIcon>\r\n          <ListItemText primary={\"EVMS\"} />\r\n        </ListItem>\r\n        {/**Profile */}\r\n        <ListItem\r\n          button\r\n          onClick={() => {\r\n            history.push(\"/dashboard/profile\");\r\n          }}\r\n          selected={location.pathName == \"/dashboard/profile\" ? true : false}\r\n        >\r\n          <ListItemIcon>\r\n            <img src={DashBoardIconFigma} />\r\n          </ListItemIcon>\r\n          <ListItemText primary={\"Profile\"} />\r\n        </ListItem>\r\n        {/**Time card */}\r\n        <ListItem\r\n          button\r\n          onClick={() => {\r\n            history.push(\"/dashboard/timecards\");\r\n          }}\r\n          selected={location.pathName == \"/dashboard/timecards\" ? true : false}\r\n        >\r\n          <ListItemIcon>\r\n            <img src={DashBoardIconFigma} />\r\n          </ListItemIcon>\r\n          <ListItemText primary={\"Timecards\"} />\r\n        </ListItem>\r\n        {/**Shared Docs */}\r\n        <ListItem\r\n          button\r\n          onClick={() => {\r\n            history.push(\"/dashboard/shared-documents\");\r\n          }}\r\n          selected={\r\n            location.pathName == \"/dashboard/shared-documents\" ? true : false\r\n          }\r\n        >\r\n          <ListItemIcon>\r\n            <img src={DashBoardIconFigma} />\r\n          </ListItemIcon>\r\n          <ListItemText primary={\"Shared Docs\"} />\r\n        </ListItem>\r\n      </List>\r\n    </Drawer>\r\n\r\n    {/**mobile drawer */}\r\n   \r\n\r\n    </>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/dashboard-icon.2ae835ab.svg\";","import React from 'react'\r\nimport { CButton, CCard, CCardBody, CAlert } from '@coreui/react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchMeetingList } from \"../../store/slices/MeetingSlice\";\r\nimport { USER_ID } from \"../../Config\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ScheduleMeetings = () => {\r\n    let history = useHistory();\r\n    const dispatch = useDispatch()\r\n    const meeting = useSelector(state => state.meetings.data);\r\n    React.useEffect(() => {\r\n        dispatch(fetchMeetingList(sessionStorage.getItem(USER_ID)))\r\n    }, [])\r\n    return (\r\n        <>\r\n            <div className=\"main-holder-projects\">\r\n                <h3 className=\"projectsHeader\">\r\n                    Scheduled Meetings\r\n                </h3>\r\n\r\n                <div className=\"card-holder1 \">\r\n                    {meeting != undefined && meeting.slice(0, 3).map((item, idx) => (\r\n                        <CCard className=\"project-card2\" key={idx}>\r\n                            <CCardBody>\r\n                                {item.room_id != \"\" &&\r\n                                <h6 className=\"id-no1\">room id: #{item.room_id}</h6>}\r\n                                {item.room_id == \"\" && <h6 className=\"id-no1\">meeting id: #{item.id}</h6>}\r\n                                <h5 className=\"card-details1\"><span className=\"p-header-3\">Agenda:</span> {item.agenda}</h5>\r\n                                <h5 className=\"card-details1\"><span className=\"p-header-3\">Location:</span> {item.medium == 0 ? 'Physical' :'Virtual'}</h5>\r\n                                <h5 className=\"card-details1\"><span className=\"p-header-3\">Scheduled Date &amp; Time :</span> {item.start_time}</h5>\r\n                            </CCardBody>\r\n\r\n                        </CCard>\r\n                    ))}\r\n                    { /**If no meetings */}\r\n                    {meeting == undefined || meeting == '' ? (\r\n                        <CAlert className=\"no-value-show-alert\" color=\"primary\">Currently there are no upcoming meetings</CAlert>\r\n                    ) : <></>}\r\n                </div>\r\n                {meeting != undefined  && <div className=\"button-holder3\"><CButton className=\"tiny-buttons1\"  onClick={() => history.push({pathname:'/dashboard/meetings'})}>View all</CButton></div>}\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\nexport default ScheduleMeetings\r\n","import React, { useState } from 'react';\r\nimport './evmsTable.css';\r\nimport { CButton, CCard, CCardBody, CAlert } from '@coreui/react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { fetchEvmsThunk } from '../../store/slices/EvmsSlice';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n\r\nconst EvmsView = () => {\r\n    let history = useHistory();\r\n    \r\n    var cpiVal\r\n    const evmsList = useSelector(state => state.evmsList.data)\r\n    console.log('evms from dashboard', evmsList)\r\n    function calculateCPI(ev,ac){\r\n      let val = Math.abs(ev/ac)\r\n\r\n      return val;\r\n\r\n}\r\n\r\n\r\n  \r\n   \r\n    return (\r\n        <>\r\n            <div className=\"main-holder-projects\">\r\n                <h3 className=\"projectsHeader\">\r\n                    EVMS Summary\r\n                </h3>\r\n                <div className=\"card-holder1\">\r\n                    {evmsList != undefined && Array.from(evmsList).slice(0, 3).map((item, idx) => (\r\n                        <CCard className=\"project-card1\" key={idx}>\r\n                            <CCardBody>\r\n                                <h6 className=\"id-no1\">{item.project.task_delivery_order.title} / {item.project.sub_task}</h6>\r\n                                <h5 className=\"card-details2\"><span className=\"p-header-4\">Cost Performance Index (CPI) :</span><span> {calculateCPI(item.earned_value,item.actual_cost)}</span><small className=\"ml-1 star-color\">*(CPI{'>'}1, within budget.CPI {'<'}1, over budget)</small></h5>\r\n                                <h5 className=\"card-details2\"><span className=\"p-header-4\">Schedule Performance Index (SPI) :</span><span> {calculateCPI(item.earned_value,item.project.planned_value)}</span><small className=\"ml-1 star-color\">*(SPI {'>'}1, within schedule,SPI {'<'}1, behind schedule)</small></h5>\r\n                            </CCardBody>\r\n                        </CCard>\r\n                    ))}\r\n                    { /**If no evmsList */}\r\n                    {evmsList == undefined || evmsList == 0 ? (\r\n\r\n\r\n\r\n                        <CAlert className=\"no-value-show-alert\" color=\"primary\">Currently there are no projects assigned to you</CAlert>\r\n\r\n\r\n                    ) : null\r\n\r\n\r\n                    }\r\n\r\n                </div>\r\n                {evmsList != undefined &&\r\n                    <div className=\"button-holder3\"><CButton className=\"tiny-buttons1\" onClick={() => history.push({ pathname: '/dashboard/EVMS/view' })}>View all</CButton></div>}\r\n\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default EvmsView;","import React, { useEffect } from 'react';\r\nimport './projectsTable.css';\r\nimport { CButton, CCard, CCardBody, CAlert } from '@coreui/react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// import { fetchProjectsThunk } from \"../../store/slices/ProjectsSlice\";\r\n// import { USER_ID } from \"../../Config\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst ProjectsTableDashboard = () => {\r\n    let history = useHistory();\r\n    const dispatch = useDispatch()\r\n    const projects = useSelector(state => state.projects.data);\r\n    useEffect(() => {\r\n        console.log(\"ProjectsList\", projects)\r\n    }, [projects])\r\n    return (\r\n        <>\r\n            <div className=\"main-holder-projects\">\r\n                <h3 className=\"projectsHeader\">\r\n                    Assigned Projects\r\n                </h3>\r\n\r\n                <div className=\"card-holder1\">\r\n                    {projects != undefined && Array.from(projects).slice(0, 3).map((item, idx) => (\r\n                        <CCard className=\"project-card1\" key={idx} onClick={() => history.push({ pathname: 'dashboard/Projects/assigned-projects/details/' + item.project.work_package_number + '/' })}>\r\n                            <CCardBody>\r\n                                {/* <h6 className=\"id-no1\">Work Package Number: # {item.project.work_package_number}</h6> */}\r\n                                <h5 className=\"card-details1\"><span className=\"p-header-3\">Project Name: </span> {item.project.sub_task}</h5>\r\n                                <h5 className=\"card-details1\"><span className=\"p-header-3\">Planned Hours: </span> {item.project.planned_hours}</h5>\r\n                                <h5 className=\"card-details1\"><span className=\"p-header-3\">Remaining Hours: </span> {item.project.remaining_hours}</h5>\r\n                                <h5 className=\"card-details1\"><span className=\"p-header-3\">Planned Delivery Date : </span>{item.project.planned_delivery_date}</h5>\r\n                            </CCardBody>\r\n                        </CCard>\r\n                    ))}\r\n                    { /**If no projects */}\r\n                    {projects == '' || projects == undefined ? (\r\n\r\n\r\n\r\n                        <CAlert className=\"no-value-show-alert\" color=\"primary\">Currently there are no projects assigned to you</CAlert>\r\n\r\n\r\n                    ) : null\r\n\r\n\r\n                    }\r\n                </div>\r\n                {projects != undefined && <div className=\"button-holder3\"><CButton className=\"tiny-buttons1\" onClick={() => history.push({ pathname: '/dashboard/Projects/assigned-projects' })}>View all</CButton></div>}\r\n\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default ProjectsTableDashboard;\r\n","import React, { useState } from 'react';\r\nimport { CButton, CCard, CCardBody, CAlert } from '@coreui/react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { fetchWbsThunk } from '../../store/slices/WbsSlice';\r\nimport WbsModal from \"../../pages/wbs-board/wbs-modal\";\r\n// import { fetchUserWiseWbsThunk } from '../../store/slices/WbsSlice';\r\nimport { API, USER_ID } from \"../../Config\";\r\nconst AssignedProjectsDashboard = () => {\r\n    let history = useHistory();\r\n    const dispatch = useDispatch()\r\n    const wbs = useSelector(state => {\r\n        // state.wbs.data\r\n        var temp_data = [];\r\n        state.wbs.data.forEach(element => {\r\n            if (element.assignee.id == sessionStorage.getItem(USER_ID)) {\r\n                temp_data.push(element)\r\n                console.log(element)\r\n            }\r\n        });\r\n        return temp_data;\r\n    });\r\n    console.log(wbs)\r\n    const [updatedData, setUpdatedData] = useState([]);\r\n    const [modal, setModal] = useState(false);\r\n    const [modalData, setModalData] = useState(null);\r\n    const editWbsModal = (value) => {\r\n        API.get('wbs/time-card/list/' + value + '/').then((res) => {\r\n            console.log('time-card list result', res);\r\n            setUpdatedData(res.data);\r\n        })\r\n        setModalData(wbs.find(element => element.id == value));\r\n        setModal(true);\r\n    }\r\n    const toggle = () => {\r\n        setModalData(null);\r\n        setModal(!modal);\r\n    }\r\n\r\n    const onWbsUpdate = () => {\r\n        setModal(false)\r\n        dispatch(fetchWbsThunk(sessionStorage.getItem(USER_ID)))\r\n        setModalData(null);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        // dispatch(fetchUserWiseWbsThunk(sessionStorage.getItem(USER_ID)))\r\n    }, [])\r\n    return (\r\n        <>\r\n\r\n            <div className=\"main-holder-projects\">\r\n                <h3 className=\"projectsHeader\">\r\n                    WBS List\r\n                </h3>\r\n\r\n                <div className=\"card-holder1\">\r\n                    {wbs != undefined && wbs.slice(0, 3).map((item, idx) => (\r\n                        // item.assignee.id == sessionStorage.getItem(USER_ID) && \r\n                        <CCard className=\"project-card1\" key={idx} onClick={() => editWbsModal(item.id)}>\r\n                            <CCardBody>\r\n                                <h5 className=\"card-details1\"><span className=\"p-header-3\">Project: </span> {item.project.sub_task}</h5>\r\n                                <h6 className=\"card-details1\"><span className=\"p-header-3\">WBS Title:</span> {item.title}</h6>\r\n                                <h6 className=\"card-details1\"><span className=\"p-header-3\">WBS Description:</span> {item.description}</h6>\r\n                                <h6 className=\"card-details1\"><span className=\"p-header-3\">End Date :</span> {item.end_date}</h6>\r\n\r\n                            </CCardBody>\r\n\r\n                        </CCard>\r\n                    ))}\r\n                    { /**If no wbs */}\r\n                    {wbs == undefined || wbs == 0 ? (\r\n\r\n\r\n\r\n                        <CAlert className=\"no-value-show-alert\" color=\"primary\">Currently there are no WBS assigned to you</CAlert>\r\n\r\n\r\n                    ) : null\r\n\r\n\r\n                    }\r\n                </div>\r\n                {wbs != undefined && <div className=\"button-holder3\"><CButton className=\"tiny-buttons1\" onClick={() => history.push({ pathname: '/dashboard/WBS/board' })}>View all</CButton></div>}\r\n            </div>\r\n            {modalData != null && <WbsModal show={modal} onClose={onWbsUpdate} toggle={toggle} data={modalData} timeCardList={updatedData} ></WbsModal>}\r\n        </>\r\n    )\r\n}\r\nexport default AssignedProjectsDashboard;\r\n","import React, { Suspense } from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Header from '../../components/header/Header';\r\nimport MatSideBar from '../../components/sidebar/MatSideBar';\r\nimport { CCol, CContainer, CFade, CRow } from '@coreui/react';\r\nimport innerRoutes from '../../routes/DashboardRoutes'\r\nimport {\r\n    Route,\r\n    Switch,\r\n  } from 'react-router-dom';\r\n  \r\nimport './dashboard.css';\r\nimport ScheduledMeetings from '../../components/scheduledMeetings/scheduledMeets'\r\nimport EvmsShow  from '../../components/evms/evmsTable'\r\nimport ProjectTables from '../../components/projects-table/projectsTable'\r\nimport AssignedToMe from '../../components/assignedProjects/assignedProjects';\r\nimport { useLocation } from 'react-router';\r\nimport { useSnackbar } from 'notistack';\r\nimport { useDispatch } from 'react-redux';\r\nimport { has_permission } from '../../helper';\r\nconst loading = (\r\n    <div className=\"pt-3 text-center\">\r\n      <div className=\"sk-spinner sk-spinner-pulse\"></div>\r\n    </div>\r\n)\r\n\r\nconst Dashboard=()=> {\r\n    let location = useLocation()\r\n    const dispatch = useDispatch()\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n    React.useEffect(()=>{\r\n        window.scrollTo(0, 0);\r\n        console.log('dashboard mounted')\r\n        if(location.state?.from == 'login'){\r\n            enqueueSnackbar('Welcome ',{variant:'success'})\r\n        }\r\n        //console.log(new Date(JSON.parse(sessionStorage.getItem('TOKEN')).time).toISOString())\r\n    },[])\r\n    return (\r\n        <>\r\n        <CContainer>\r\n            {/**Row for showing da tables */}\r\n            <CRow>\r\n                <div className=\"col-lg-5 offset-lg-1\"><ProjectTables/></div>\r\n\r\n                <div className=\"col-lg-5\"><AssignedToMe/></div> \r\n                \r\n                <div className=\"col-lg-5 offset-lg-1\"><ScheduledMeetings/></div>\r\n                {has_permission('evms.view_evms') &&\r\n                <div className=\"col-lg-5 \"><EvmsShow/></div>}\r\n                \r\n               \r\n            \r\n\r\n            </CRow>\r\n        </CContainer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default React.memo(Dashboard)\r\n","import { CContainer, CRow, CCol, CCard, CCardHeader, CCardBody, CForm, CLabel, CInput, CButton, CModal, CModalBody, CModalHeader, CModalFooter, CTextarea } from '@coreui/react';\r\nimport React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { form, useFormik } from 'formik';\r\nimport { API, USER_ID } from '../../Config';\r\nimport swal from 'sweetalert';\r\nimport { fetchProjectsForPMThunk, fetchProjectsThunk } from '../../store/slices/ProjectsSlice';\r\nimport { fetchWbsThunk } from '../../store/slices/WbsSlice';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\n\r\nconst WbsModal = (props) => {\r\n    console.log('props wbs modal: ', props)\r\n    // const modalData = useSelector(state => state.wbs.data)\r\n    const [deliverableView, setDeliverableView] = useState(true);\r\n    const [hrsWorked, setHrsWorked] = useState(true);\r\n    const dispatch = useDispatch()\r\n    const wbsStatusArray = [{\r\n        \"title\": \"To Do\",\r\n        \"status\": 1\r\n    }, {\r\n        \"title\": \"Ongoing\",\r\n        \"status\": 2\r\n    }, {\r\n        \"title\": \"Done\",\r\n        \"status\": 3\r\n    }]\r\n\r\n    const updateWbs = (data) => {\r\n        console.log(\"formWbsUpdate:\", data.remaining_hours)\r\n        data.remaining_hours = props.data.project.remaining_hours - formWbsUpdate.values.hours_worked;\r\n        API.put('wbs/update/' + props.data.id + '/', formWbsUpdate.values).then((res) => {\r\n            console.log('update result', res)\r\n            if (res.status == 200 && res.data.success == 'True') {\r\n                dispatch(fetchProjectsForPMThunk(sessionStorage.getItem(USER_ID)))\r\n                dispatch(fetchProjectsThunk(sessionStorage.getItem(USER_ID)))\r\n                dispatch(fetchWbsThunk(sessionStorage.getItem(USER_ID)))\r\n                swal({\r\n                    title: \"Good job!\",\r\n                    text: res.data.message,\r\n                    icon: \"success\",\r\n                });\r\n                props.onClose()\r\n            }\r\n        })\r\n    }\r\n\r\n    const validateWbsCreateForm = (values) => {\r\n        const errors = {};\r\n        if (!values.title) errors.title = \"Title is required!\";\r\n        if (!values.actual_work_done) errors.actual_work_done = \"Actual work done today is required! (250 charracters)\";\r\n        return errors;\r\n    }\r\n\r\n    const formWbsUpdate = useFormik({\r\n        initialValues: {\r\n            project: props.data.project.id,\r\n            assignee: props.data.assignee.id,\r\n            title: props.data.title,\r\n            status: props.data.status,\r\n            description: props.data.description,\r\n            start_date: props.data.start_date,\r\n            end_date: props.data.end_date,\r\n            hours_worked: props.data.hours_worked,\r\n            progress: props.data.progress,\r\n            comments: props.data.comments,\r\n            deliverable: props.data.deliverable,\r\n            date_updated: '',\r\n            actual_work_done: '',\r\n            remaining_hours: ''\r\n        },\r\n        validateOnChange: true,\r\n        validateOnBlur: true,\r\n        validate: validateWbsCreateForm,\r\n        onSubmit: (values) => updateWbs(values)\r\n    })\r\n\r\n    function is_form_submitting() {\r\n        console.log(formWbsUpdate.isSubmitting, formWbsUpdate.isValidating)\r\n        if (formWbsUpdate.isSubmitting && !formWbsUpdate.isValidating) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CModal closeOnBackdrop={false} closeOnBackdrop={false} show={props.show} onClose={props.toggle} size=\"xl\">\r\n                <CModalHeader closeButton>\r\n                    {props.data.project && props.data.project.task_delivery_order.title + \" / \"}\r\n                    {props.data.project && props.data.project.sub_task + \" / \"}\r\n                    {props.data.project && props.data.project.task_title}\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <CRow>\r\n                        <div className=\"col-lg-8 mb-3 border-right\">\r\n                            <CForm>\r\n                                <CRow>\r\n                                    <div className=\"col-lg-12 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            Title\r\n                                        </CLabel>\r\n                                        <CInput id=\"title\" name=\"title\" className=\"custom-forminput-5\" onChange={formWbsUpdate.handleChange} value={formWbsUpdate.values.title} />\r\n                                        {formWbsUpdate.errors.title && <p className=\"error\" style={{ fontSize: '14px !important' }}>{formWbsUpdate.errors.title}</p>}\r\n                                    </div>\r\n                                    {/* <div className=\"col-lg-3 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            Status\r\n                                        </CLabel>\r\n                                        <select id=\"status\" name=\"status\" className=\"form-select\" onChange={formWbsUpdate.handleChange} value={formWbsUpdate.values.status}>\r\n                                            {wbsStatusArray.map((item, idx) => (\r\n                                                <option key={idx} value={item.status}>{item.title}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                    </div> */}\r\n                                </CRow>\r\n                                <CRow>\r\n                                    <div className=\"col-lg-12 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            Descriptions\r\n                                        </CLabel>\r\n                                        <CTextarea id=\"description\" name=\"description\" className=\"custom-forminput-5 text-box-height\" onChange={formWbsUpdate.handleChange} value={formWbsUpdate.values.description}></CTextarea>\r\n                                    </div>\r\n                                </CRow>\r\n                                <CRow>\r\n                                    <div className=\"col-lg-6 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            Start date\r\n                                        </CLabel>\r\n                                        <CInput id=\"start_date\" name=\"start_date\" type=\"date\" className=\"custom-forminput-5\" onChange={formWbsUpdate.handleChange} value={formWbsUpdate.values.start_date}></CInput>\r\n                                    </div>\r\n                                    <div className=\"col-lg-6 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            End date\r\n                                        </CLabel>\r\n                                        <CInput id=\"end_date\" name=\"end_date\" type=\"date\" className=\"custom-forminput-5\" onChange={formWbsUpdate.handleChange} value={formWbsUpdate.values.end_date}></CInput>\r\n                                    </div>\r\n                                </CRow>\r\n                                {/*Actual work today */}\r\n                                <CRow>\r\n                                    <div className=\"col-lg-12 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">Actual Work Today</CLabel>\r\n                                        <CInput id=\"actual_work_done\" type=\"text\" name=\"actual_work_done\" className=\"custom-forminpput-5\" onChange={(e) => {\r\n                                            formWbsUpdate.setFieldValue('actual_work_done', e.target.value); if (e.target.value == null || e.target.value.length == 0) { setHrsWorked(true) } else { setHrsWorked(false) }\r\n                                        }\r\n                                        } value={formWbsUpdate.values.actual_work_done}></CInput>\r\n                                        {formWbsUpdate.errors.actual_work_done && <p className=\"error\" style={{ fontSize: '14px !important' }}>{formWbsUpdate.errors.actual_work_done}</p>}\r\n                                    </div>\r\n                                </CRow>\r\n                                <CRow>\r\n                                    <div className=\"col-lg-6 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            Hours worked\r\n                                        </CLabel>\r\n                                        <CInput id=\"hours_worked\" name=\"hours_worked\" type=\"number\" className=\"custom-forminput-5\" onChange={formWbsUpdate.handleChange} value={formWbsUpdate.values.hours_worked} disabled={hrsWorked}></CInput>\r\n                                    </div>\r\n                                    <div className=\"col-lg-6 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            Progress(%)\r\n                                        </CLabel>\r\n                                        <CInput id=\"progress\" name=\"progress\" type=\"number\" max=\"100\" className=\"custom-forminput-5\" onChange={(e) => {\r\n                                            formWbsUpdate.setFieldValue('progress', e.target.value); if (e.target.value == '100') {\r\n                                                setDeliverableView(false);\r\n                                                formWbsUpdate.setFieldValue('deliverable', formWbsUpdate.values.deliverable)\r\n                                            } else {\r\n                                                setDeliverableView(true);\r\n                                                formWbsUpdate.setFieldValue('deliverable', \"\")\r\n                                            }\r\n                                        }} value={formWbsUpdate.values.progress}></CInput>\r\n                                    </div>\r\n                                </CRow>\r\n                                <CRow>\r\n                                    <div className=\"col-lg-12 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            Comments\r\n                                        </CLabel>\r\n                                        <CTextarea id=\"comments\" name=\"comments\" className=\"custom-forminput-5\" onChange={formWbsUpdate.handleChange} value={formWbsUpdate.values.comments}></CTextarea>\r\n                                    </div>\r\n                                </CRow>\r\n                                <CRow>\r\n                                    <div className=\"col-lg-12 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            Deliverable\r\n                                        </CLabel>\r\n                                        <CInput id=\"deliverable\" name=\"deliverable\" className=\"custom-forminput-5\" onChange={formWbsUpdate.handleChange} value={formWbsUpdate.values.deliverable} disabled={deliverableView} ></CInput>\r\n                                    </div>\r\n                                </CRow>\r\n                                {props.data.assignee.id == sessionStorage.getItem(USER_ID) && <div>{is_form_submitting() == true ? <LinearProgress /> :\r\n                                    <div>\r\n                                        <CButton type=\"button\" onClick={formWbsUpdate.handleSubmit} color=\"primary\">Update</CButton>{' '}\r\n                                        <CButton\r\n                                            color=\"secondary\"\r\n                                            onClick={props.toggle}\r\n                                        >Cancel</CButton>\r\n                                    </div>}\r\n                                </div>}\r\n                            </CForm>\r\n                        </div>\r\n                        <div className=\"col-lg-4 mb-3\">\r\n                            <div>\r\n                                <p>\r\n                                    Assignee:\r\n                                    <br></br>\r\n                                    {/* Pial Noman */}\r\n                                    <span className=\"wbs-reporter-name\">{props.data.assignee?.first_name != undefined && props.data.assignee.first_name + \" \" + props.data.assignee.last_name}</span>\r\n                                </p>\r\n                                <p>\r\n                                    Reporter:\r\n                                    <br></br>\r\n                                    {/* Pial Noman */}\r\n                                    <span className=\"wbs-reporter-name\">{props.data.reporter?.first_name != undefined && props.data.reporter.first_name + \" \" + props.data.reporter.last_name}</span>\r\n                                </p>\r\n                                <p>\r\n                                    Remaining hours:\r\n                                    <br></br>\r\n                                    {props.data.project?.remaining_hours}\r\n                                </p>\r\n                                {/**task list show */}\r\n                                <div className=\"task-list\">\r\n                                    <p>Task List:</p>\r\n                                    <ol className=\"task-list-show\">\r\n                                        {props.timeCardList?.data != undefined ? (Array.from(props.timeCardList.data).map((item) => (\r\n                                            <li className=\"task-list-show-item\">\r\n                                                {item.actual_work_done + \" ➤ \" + item.hours_today + \" hr(s)\"}\r\n                                                 {/* By {item.time_card_assignee.first_name + \" \" + item.time_card_assignee.last_name}  */}\r\n                                                <p><small>@ {item.date_updated} </small></p>\r\n                                            </li>\r\n                                        ))) : (\"No task has been done so far.\")}\r\n                                    </ol>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </CRow>\r\n                </CModalBody>\r\n            </CModal>\r\n        </>\r\n    )\r\n}\r\nexport default WbsModal;"],"sourceRoot":""}