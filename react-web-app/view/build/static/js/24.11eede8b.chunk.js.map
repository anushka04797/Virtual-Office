{"version":3,"sources":["components/scheduledMeetings/scheduledMeets.js","components/evms/evmsTable.js","components/projects-table/projectsTable.js","components/assignedProjects/assignedProjects.js","pages/dashboard/Dashboard.js","../node_modules/@mui/material/LinearProgress/linearProgressClasses.js","../node_modules/@mui/material/LinearProgress/LinearProgress.js","pages/wbs-board/wbs-modal.js"],"names":["ScheduleMeetings","history","useHistory","dispatch","useDispatch","meeting","useSelector","state","meetings","data","React","useEffect","fetchMeetingList","sessionStorage","getItem","USER_ID","className","undefined","slice","map","item","idx","room_id","id","agenda","medium","start_time","color","onClick","push","pathname","EvmsView","evmsList","calculateCPI","ev","ac","Math","abs","console","log","Array","from","project","task_delivery_order","title","sub_task","earned_value","actual_cost","planned_value","ProjectsTableDashboard","projects","work_package_number","planned_hours","remaining_hours","planned_delivery_date","AssignedProjectsDashboard","wbs","temp_data","forEach","element","assignee","useState","updatedData","setUpdatedData","modal","setModal","modalData","setModalData","value","API","get","then","res","find","description","end_date","show","onClose","fetchWbsThunk","toggle","timeCardList","Dashboard","location","useLocation","useSnackbar","enqueueSnackbar","closeSnackbar","window","scrollTo","variant","message","has_permission","memo","getLinearProgressUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_t","_t2","_t3","_t4","_t5","_t6","_excluded","indeterminate1Keyframe","keyframes","indeterminate2Keyframe","bufferKeyframe","getColorShade","theme","palette","mode","lighten","main","darken","LinearProgressRoot","styled","name","overridesResolver","props","styles","ownerState","root","capitalize","_extends","position","overflow","display","height","zIndex","colorAdjust","backgroundColor","content","left","top","right","bottom","opacity","transform","LinearProgressDashed","dashed","marginTop","width","backgroundImage","backgroundSize","backgroundPosition","css","LinearProgressBar1","bar","bar1Indeterminate","bar1Determinate","bar1Buffer","transition","transformOrigin","LinearProgressBar2","bar2Indeterminate","bar2Buffer","LinearProgress","inProps","ref","useThemeProps","valueBuffer","other","_objectWithoutPropertiesLoose","classes","slots","bar1","bar2","composeClasses","useUtilityClasses","useTheme","rootProps","inlineStyles","round","direction","process","_jsxs","clsx","role","children","_jsx","style","WbsModal","deliverableView","setDeliverableView","hrsWorked","setHrsWorked","formWbsUpdate","useFormik","initialValues","status","start_date","hours_worked","progress","comments","deliverable","date_updated","actual_work_done","validateOnChange","validateOnBlur","validate","values","errors","onSubmit","put","success","fetchProjectsForPMThunk","fetchProjectsThunk","swal","text","icon","closeOnBackdrop","closeButton","task_title","onChange","handleChange","fontSize","type","e","setFieldValue","target","length","disabled","max","isSubmitting","isValidating","handleSubmit","first_name","last_name","reporter","hours_today"],"mappings":"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","file":"static/js/24.11eede8b.chunk.js","sourcesContent":["import React from 'react'\r\nimport { CButton, CCard, CCardBody, CAlert } from '@coreui/react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchMeetingList } from \"../../store/slices/MeetingSlice\";\r\nimport { USER_ID } from \"../../Config\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ScheduleMeetings = () => {\r\n    let history = useHistory();\r\n    const dispatch = useDispatch()\r\n    const meeting = useSelector(state => state.meetings.data);\r\n    React.useEffect(() => {\r\n        dispatch(fetchMeetingList(sessionStorage.getItem(USER_ID)))\r\n    }, [])\r\n    return (\r\n        <>\r\n            <div className=\"main-holder-projects\">\r\n                <h3 className=\"projectsHeader\">\r\n                    Scheduled Meetings\r\n                </h3>\r\n\r\n                <div className=\"card-holder1 \">\r\n                    {meeting != undefined && meeting.slice(0, 3).map((item, idx) => (\r\n                        <CCard className=\"project-card2\" key={idx}>\r\n                            <CCardBody>\r\n                                {item.room_id != \"\" &&\r\n                                <h6 className=\"id-no1\">room id: #{item.room_id}</h6>}\r\n                                {item.room_id == \"\" && <h6 className=\"id-no1\">meeting id: #{item.id}</h6>}\r\n                                <h5 className=\"card-details1\"><span className=\"p-header-3\">Agenda:</span> {item.agenda}</h5>\r\n                                <h5 className=\"card-details1\"><span className=\"p-header-3\">Location:</span> {item.medium == 0 ? 'Physical' :'Virtual'}</h5>\r\n                                <h5 className=\"card-details1\"><span className=\"p-header-3\">Scheduled Date &amp; Time :</span> {item.start_time}</h5>\r\n                            </CCardBody>\r\n\r\n                        </CCard>\r\n                    ))}\r\n                    { /**If no meetings */}\r\n                    {meeting == undefined || meeting == '' ? (\r\n                        <CAlert className=\"no-value-show-alert\" color=\"primary\">Currently there are no upcoming meetings</CAlert>\r\n                    ) : <></>}\r\n                </div>\r\n                {meeting != undefined  && <div className=\"button-holder3\"><CButton className=\"tiny-buttons1\"  onClick={() => history.push({pathname:'/dashboard/meetings'})}>View all</CButton></div>}\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\nexport default ScheduleMeetings\r\n","import React, { useState } from 'react';\r\nimport './evmsTable.css';\r\nimport { CButton, CCard, CCardBody, CAlert } from '@coreui/react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { fetchEvmsThunk } from '../../store/slices/EvmsSlice';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n\r\nconst EvmsView = () => {\r\n    let history = useHistory();\r\n    \r\n    var cpiVal\r\n    const evmsList = useSelector(state => state.evmsList.data)\r\n    console.log('evms from dashboard', evmsList)\r\n    function calculateCPI(ev,ac){\r\n      let val = Math.abs(ev/ac)\r\n\r\n      return val;\r\n\r\n}\r\n\r\n\r\n  \r\n   \r\n    return (\r\n        <>\r\n            <div className=\"main-holder-projects\">\r\n                <h3 className=\"projectsHeader\">\r\n                    EVMS Summary\r\n                </h3>\r\n                <div className=\"card-holder1\">\r\n                    {evmsList != undefined && Array.from(evmsList).slice(0, 3).map((item, idx) => (\r\n                        <CCard className=\"project-card1\" key={idx}>\r\n                            <CCardBody>\r\n                                <h6 className=\"id-no1\">{item.project.task_delivery_order.title} / {item.project.sub_task}</h6>\r\n                                <h5 className=\"card-details2\"><span className=\"p-header-4\">Cost Performance Index (CPI) :</span><span> {calculateCPI(item.earned_value,item.actual_cost)}</span><small className=\"ml-1 star-color\">*(CPI{'>'}1, within budget.CPI {'<'}1, over budget)</small></h5>\r\n                                <h5 className=\"card-details2\"><span className=\"p-header-4\">Schedule Performance Index (SPI) :</span><span> {calculateCPI(item.earned_value,item.project.planned_value)}</span><small className=\"ml-1 star-color\">*(SPI {'>'}1, within schedule,SPI {'<'}1, behind schedule)</small></h5>\r\n                            </CCardBody>\r\n                        </CCard>\r\n                    ))}\r\n                    { /**If no evmsList */}\r\n                    {evmsList == undefined || evmsList == 0 ? (\r\n\r\n\r\n\r\n                        <CAlert className=\"no-value-show-alert\" color=\"primary\">Currently there are no projects assigned to you</CAlert>\r\n\r\n\r\n                    ) : null\r\n\r\n\r\n                    }\r\n\r\n                </div>\r\n                {evmsList != undefined &&\r\n                    <div className=\"button-holder3\"><CButton className=\"tiny-buttons1\" onClick={() => history.push({ pathname: '/dashboard/EVMS/view' })}>View all</CButton></div>}\r\n\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default EvmsView;","import React, { useEffect } from 'react';\r\nimport './projectsTable.css';\r\nimport { CButton, CCard, CCardBody, CAlert } from '@coreui/react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// import { fetchProjectsThunk } from \"../../store/slices/ProjectsSlice\";\r\n// import { USER_ID } from \"../../Config\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst ProjectsTableDashboard = () => {\r\n    let history = useHistory();\r\n    const dispatch = useDispatch()\r\n    const projects = useSelector(state => state.projects.data);\r\n    useEffect(() => {\r\n        console.log(\"ProjectsList\", projects)\r\n    }, [projects])\r\n    return (\r\n        <>\r\n            <div className=\"main-holder-projects\">\r\n                <h3 className=\"projectsHeader\">\r\n                    Assigned Projects\r\n                </h3>\r\n\r\n                <div className=\"card-holder1\">\r\n                    {projects != undefined && Array.from(projects).slice(0, 3).map((item, idx) => (\r\n                        <CCard className=\"project-card1\" key={idx} onClick={() => history.push({ pathname: 'dashboard/Projects/assigned-projects/details/' + item.project.work_package_number + '/' })}>\r\n                            <CCardBody>\r\n                                {/* <h6 className=\"id-no1\">Work Package Number: # {item.project.work_package_number}</h6> */}\r\n                                <h5 className=\"card-details1\"><span className=\"p-header-3\">Project Name: </span> {item.project.sub_task}</h5>\r\n                                <h5 className=\"card-details1\"><span className=\"p-header-3\">Planned Hours: </span> {item.project.planned_hours}</h5>\r\n                                <h5 className=\"card-details1\"><span className=\"p-header-3\">Remaining Hours: </span> {item.project.remaining_hours}</h5>\r\n                                <h5 className=\"card-details1\"><span className=\"p-header-3\">Planned Delivery Date : </span>{item.project.planned_delivery_date}</h5>\r\n                            </CCardBody>\r\n                        </CCard>\r\n                    ))}\r\n                    { /**If no projects */}\r\n                    {projects == '' || projects == undefined ? (\r\n\r\n\r\n\r\n                        <CAlert className=\"no-value-show-alert\" color=\"primary\">Currently there are no projects assigned to you</CAlert>\r\n\r\n\r\n                    ) : null\r\n\r\n\r\n                    }\r\n                </div>\r\n                {projects != undefined && <div className=\"button-holder3\"><CButton className=\"tiny-buttons1\" onClick={() => history.push({ pathname: '/dashboard/Projects/assigned-projects' })}>View all</CButton></div>}\r\n\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default ProjectsTableDashboard;\r\n","import React, { useState } from 'react';\r\nimport { CButton, CCard, CCardBody, CAlert } from '@coreui/react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { fetchWbsThunk } from '../../store/slices/WbsSlice';\r\nimport WbsModal from \"../../pages/wbs-board/wbs-modal\";\r\n// import { fetchUserWiseWbsThunk } from '../../store/slices/WbsSlice';\r\nimport { API, USER_ID } from \"../../Config\";\r\nconst AssignedProjectsDashboard = () => {\r\n    let history = useHistory();\r\n    const dispatch = useDispatch()\r\n    const wbs = useSelector(state => {\r\n        // state.wbs.data\r\n        var temp_data = [];\r\n        state.wbs.data.forEach(element => {\r\n            if (element.assignee.id == sessionStorage.getItem(USER_ID)) {\r\n                temp_data.push(element)\r\n                // console.log(element)\r\n            }\r\n        });\r\n        return temp_data;\r\n    });\r\n    console.log(wbs)\r\n    const [updatedData, setUpdatedData] = useState([]);\r\n    const [modal, setModal] = useState(false);\r\n    const [modalData, setModalData] = useState(null);\r\n    const editWbsModal = (value) => {\r\n        API.get('wbs/time-card/list/' + value + '/').then((res) => {\r\n            console.log('time-card list result', res);\r\n            setUpdatedData(res.data);\r\n        })\r\n        setModalData(wbs.find(element => element.id == value));\r\n        setModal(true);\r\n    }\r\n    const toggle = () => {\r\n        setModalData(null);\r\n        setModal(!modal);\r\n    }\r\n\r\n    const onWbsUpdate = () => {\r\n        setModal(false)\r\n        dispatch(fetchWbsThunk(sessionStorage.getItem(USER_ID)))\r\n        setModalData(null);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        // dispatch(fetchUserWiseWbsThunk(sessionStorage.getItem(USER_ID)))\r\n    }, [])\r\n    return (\r\n        <>\r\n\r\n            <div className=\"main-holder-projects\">\r\n                <h3 className=\"projectsHeader\">\r\n                    WBS List\r\n                </h3>\r\n\r\n                <div className=\"card-holder1\">\r\n                    {wbs != undefined && wbs.slice(0, 3).map((item, idx) => (\r\n                        // item.assignee.id == sessionStorage.getItem(USER_ID) && \r\n                        <CCard className=\"project-card1\" key={idx} onClick={() => editWbsModal(item.id)}>\r\n                            <CCardBody>\r\n                                <h5 className=\"card-details1\"><span className=\"p-header-3\">Project: </span> {item.project.sub_task}</h5>\r\n                                <h6 className=\"card-details1\"><span className=\"p-header-3\">WBS Title:</span> {item.title}</h6>\r\n                                <h6 className=\"card-details1\"><span className=\"p-header-3\">WBS Description:</span> {item.description}</h6>\r\n                                <h6 className=\"card-details1\"><span className=\"p-header-3\">End Date :</span> {item.end_date}</h6>\r\n\r\n                            </CCardBody>\r\n\r\n                        </CCard>\r\n                    ))}\r\n                    { /**If no wbs */}\r\n                    {wbs == undefined || wbs == 0 ? (\r\n\r\n\r\n\r\n                        <CAlert className=\"no-value-show-alert\" color=\"primary\">Currently there are no WBS assigned to you</CAlert>\r\n\r\n\r\n                    ) : null\r\n\r\n\r\n                    }\r\n                </div>\r\n                {wbs != undefined && <div className=\"button-holder3\"><CButton className=\"tiny-buttons1\" onClick={() => history.push({ pathname: '/dashboard/WBS/board' })}>View all</CButton></div>}\r\n            </div>\r\n            {modalData != null && <WbsModal show={modal} onClose={onWbsUpdate} toggle={toggle} data={modalData} timeCardList={updatedData} ></WbsModal>}\r\n        </>\r\n    )\r\n}\r\nexport default AssignedProjectsDashboard;\r\n","import React, { Suspense } from 'react';\r\nimport { CCol, CContainer, CFade, CRow } from '@coreui/react';\r\nimport innerRoutes from '../../routes/DashboardRoutes'\r\n  \r\nimport './dashboard.css';\r\nimport ScheduledMeetings from '../../components/scheduledMeetings/scheduledMeets'\r\nimport EvmsShow  from '../../components/evms/evmsTable'\r\nimport ProjectTables from '../../components/projects-table/projectsTable'\r\nimport AssignedToMe from '../../components/assignedProjects/assignedProjects';\r\nimport { useLocation } from 'react-router';\r\nimport { useSnackbar } from 'notistack';\r\nimport { useDispatch } from 'react-redux';\r\nimport { has_permission } from '../../helper';\r\nconst loading = (\r\n    <div className=\"pt-3 text-center\">\r\n      <div className=\"sk-spinner sk-spinner-pulse\"></div>\r\n    </div>\r\n)\r\n\r\nconst Dashboard=()=> {\r\n    let location = useLocation()\r\n    const dispatch = useDispatch()\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n    React.useEffect(()=>{\r\n        window.scrollTo(0, 0);\r\n        console.log('dashboard mounted',location.state)\r\n        if(location.state?.from == 'login'){\r\n            enqueueSnackbar('Welcome ',{variant:'success'})\r\n        }\r\n        if(location.state?.message){\r\n            console.log('message',location.state.message)\r\n            enqueueSnackbar(location.state.message,{variant:'warning'})\r\n        }\r\n        //console.log(new Date(JSON.parse(sessionStorage.getItem('TOKEN')).time).toISOString())\r\n    },[])\r\n    return (\r\n        <>\r\n        <CContainer>\r\n            {/**Row for showing da tables */}\r\n            <CRow>\r\n                <div className=\"col-lg-5 offset-lg-1\"><ProjectTables/></div>\r\n                <div className=\"col-lg-5\"><AssignedToMe/></div> \r\n                <div className=\"col-lg-5 offset-lg-1\"><ScheduledMeetings/></div>\r\n                {has_permission('evms.view_evms') && <div className=\"col-lg-5 \"><EvmsShow/></div>}\r\n            </CRow>\r\n        </CContainer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default React.memo(Dashboard)\r\n","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getLinearProgressUtilityClass(slot) {\n  return generateUtilityClass('MuiLinearProgress', slot);\n}\nconst linearProgressClasses = generateUtilityClasses('MuiLinearProgress', ['root', 'colorPrimary', 'colorSecondary', 'determinate', 'indeterminate', 'buffer', 'query', 'dashed', 'dashedColorPrimary', 'dashedColorSecondary', 'bar', 'barColorPrimary', 'barColorSecondary', 'bar1Indeterminate', 'bar1Determinate', 'bar1Buffer', 'bar2Indeterminate', 'bar2Buffer']);\nexport default linearProgressClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"color\", \"value\", \"valueBuffer\", \"variant\"];\n\nlet _ = t => t,\n    _t,\n    _t2,\n    _t3,\n    _t4,\n    _t5,\n    _t6;\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { keyframes, css, darken, lighten } from '@mui/system';\nimport capitalize from '../utils/capitalize';\nimport useTheme from '../styles/useTheme';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getLinearProgressUtilityClass } from './linearProgressClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst TRANSITION_DURATION = 4; // seconds\n\nconst indeterminate1Keyframe = keyframes(_t || (_t = _`\n  0% {\n    left: -35%;\n    right: 100%;\n  }\n\n  60% {\n    left: 100%;\n    right: -90%;\n  }\n\n  100% {\n    left: 100%;\n    right: -90%;\n  }\n`));\nconst indeterminate2Keyframe = keyframes(_t2 || (_t2 = _`\n  0% {\n    left: -200%;\n    right: 100%;\n  }\n\n  60% {\n    left: 107%;\n    right: -8%;\n  }\n\n  100% {\n    left: 107%;\n    right: -8%;\n  }\n`));\nconst bufferKeyframe = keyframes(_t3 || (_t3 = _`\n  0% {\n    opacity: 1;\n    background-position: 0 -23px;\n  }\n\n  60% {\n    opacity: 0;\n    background-position: 0 -23px;\n  }\n\n  100% {\n    opacity: 1;\n    background-position: -200px -23px;\n  }\n`));\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    variant,\n    color\n  } = ownerState;\n  const slots = {\n    root: ['root', `color${capitalize(color)}`, variant],\n    dashed: ['dashed', `dashedColor${capitalize(color)}`],\n    bar1: ['bar', `barColor${capitalize(color)}`, (variant === 'indeterminate' || variant === 'query') && 'bar1Indeterminate', variant === 'determinate' && 'bar1Determinate', variant === 'buffer' && 'bar1Buffer'],\n    bar2: ['bar', variant !== 'buffer' && `barColor${capitalize(color)}`, variant === 'buffer' && `color${capitalize(color)}`, (variant === 'indeterminate' || variant === 'query') && 'bar2Indeterminate', variant === 'buffer' && 'bar2Buffer']\n  };\n  return composeClasses(slots, getLinearProgressUtilityClass, classes);\n};\n\nconst getColorShade = (theme, color) => {\n  if (color === 'inherit') {\n    return 'currentColor';\n  }\n\n  return theme.palette.mode === 'light' ? lighten(theme.palette[color].main, 0.62) : darken(theme.palette[color].main, 0.5);\n};\n\nconst LinearProgressRoot = styled('span', {\n  name: 'MuiLinearProgress',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[`color${capitalize(ownerState.color)}`], styles[ownerState.variant]];\n  }\n})(({\n  ownerState,\n  theme\n}) => _extends({\n  position: 'relative',\n  overflow: 'hidden',\n  display: 'block',\n  height: 4,\n  zIndex: 0,\n  // Fix Safari's bug during composition of different paint.\n  '@media print': {\n    colorAdjust: 'exact'\n  },\n  backgroundColor: getColorShade(theme, ownerState.color)\n}, ownerState.color === 'inherit' && ownerState.variant !== 'buffer' && {\n  backgroundColor: 'none',\n  '&::before': {\n    content: '\"\"',\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'currentColor',\n    opacity: 0.3\n  }\n}, ownerState.variant === 'buffer' && {\n  backgroundColor: 'transparent'\n}, ownerState.variant === 'query' && {\n  transform: 'rotate(180deg)'\n}));\nconst LinearProgressDashed = styled('span', {\n  name: 'MuiLinearProgress',\n  slot: 'Dashed',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.dashed, styles[`dashedColor${capitalize(ownerState.color)}`]];\n  }\n})(({\n  ownerState,\n  theme\n}) => {\n  const backgroundColor = getColorShade(theme, ownerState.color);\n  return _extends({\n    position: 'absolute',\n    marginTop: 0,\n    height: '100%',\n    width: '100%'\n  }, ownerState.color === 'inherit' && {\n    opacity: 0.3\n  }, {\n    backgroundImage: `radial-gradient(${backgroundColor} 0%, ${backgroundColor} 16%, transparent 42%)`,\n    backgroundSize: '10px 10px',\n    backgroundPosition: '0 -23px'\n  });\n}, css(_t4 || (_t4 = _`\n    animation: ${0} 3s infinite linear;\n  `), bufferKeyframe));\nconst LinearProgressBar1 = styled('span', {\n  name: 'MuiLinearProgress',\n  slot: 'Bar1',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.bar, styles[`barColor${capitalize(ownerState.color)}`], (ownerState.variant === 'indeterminate' || ownerState.variant === 'query') && styles.bar1Indeterminate, ownerState.variant === 'determinate' && styles.bar1Determinate, ownerState.variant === 'buffer' && styles.bar1Buffer];\n  }\n})(({\n  ownerState,\n  theme\n}) => _extends({\n  width: '100%',\n  position: 'absolute',\n  left: 0,\n  bottom: 0,\n  top: 0,\n  transition: 'transform 0.2s linear',\n  transformOrigin: 'left',\n  backgroundColor: ownerState.color === 'inherit' ? 'currentColor' : theme.palette[ownerState.color].main\n}, ownerState.variant === 'determinate' && {\n  transition: `transform .${TRANSITION_DURATION}s linear`\n}, ownerState.variant === 'buffer' && {\n  zIndex: 1,\n  transition: `transform .${TRANSITION_DURATION}s linear`\n}), ({\n  ownerState\n}) => (ownerState.variant === 'indeterminate' || ownerState.variant === 'query') && css(_t5 || (_t5 = _`\n      width: auto;\n      animation: ${0} 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;\n    `), indeterminate1Keyframe));\nconst LinearProgressBar2 = styled('span', {\n  name: 'MuiLinearProgress',\n  slot: 'Bar2',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.bar, styles[`barColor${capitalize(ownerState.color)}`], (ownerState.variant === 'indeterminate' || ownerState.variant === 'query') && styles.bar2Indeterminate, ownerState.variant === 'buffer' && styles.bar2Buffer];\n  }\n})(({\n  ownerState,\n  theme\n}) => _extends({\n  width: '100%',\n  position: 'absolute',\n  left: 0,\n  bottom: 0,\n  top: 0,\n  transition: 'transform 0.2s linear',\n  transformOrigin: 'left'\n}, ownerState.variant !== 'buffer' && {\n  backgroundColor: ownerState.color === 'inherit' ? 'currentColor' : theme.palette[ownerState.color].main\n}, ownerState.color === 'inherit' && {\n  opacity: 0.3\n}, ownerState.variant === 'buffer' && {\n  backgroundColor: getColorShade(theme, ownerState.color),\n  transition: `transform .${TRANSITION_DURATION}s linear`\n}), ({\n  ownerState\n}) => (ownerState.variant === 'indeterminate' || ownerState.variant === 'query') && css(_t6 || (_t6 = _`\n      width: auto;\n      animation: ${0} 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite;\n    `), indeterminate2Keyframe));\n/**\n * ## ARIA\n *\n * If the progress bar is describing the loading progress of a particular region of a page,\n * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\n * attribute to `true` on that region until it has finished loading.\n */\n\nconst LinearProgress = /*#__PURE__*/React.forwardRef(function LinearProgress(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiLinearProgress'\n  });\n\n  const {\n    className,\n    color = 'primary',\n    value,\n    valueBuffer,\n    variant = 'indeterminate'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    color,\n    variant\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const theme = useTheme();\n  const rootProps = {};\n  const inlineStyles = {\n    bar1: {},\n    bar2: {}\n  };\n\n  if (variant === 'determinate' || variant === 'buffer') {\n    if (value !== undefined) {\n      rootProps['aria-valuenow'] = Math.round(value);\n      rootProps['aria-valuemin'] = 0;\n      rootProps['aria-valuemax'] = 100;\n      let transform = value - 100;\n\n      if (theme.direction === 'rtl') {\n        transform = -transform;\n      }\n\n      inlineStyles.bar1.transform = `translateX(${transform}%)`;\n    } else if (process.env.NODE_ENV !== 'production') {\n      console.error('MUI: You need to provide a value prop ' + 'when using the determinate or buffer variant of LinearProgress .');\n    }\n  }\n\n  if (variant === 'buffer') {\n    if (valueBuffer !== undefined) {\n      let transform = (valueBuffer || 0) - 100;\n\n      if (theme.direction === 'rtl') {\n        transform = -transform;\n      }\n\n      inlineStyles.bar2.transform = `translateX(${transform}%)`;\n    } else if (process.env.NODE_ENV !== 'production') {\n      console.error('MUI: You need to provide a valueBuffer prop ' + 'when using the buffer variant of LinearProgress.');\n    }\n  }\n\n  return /*#__PURE__*/_jsxs(LinearProgressRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    role: \"progressbar\"\n  }, rootProps, {\n    ref: ref\n  }, other, {\n    children: [variant === 'buffer' ? /*#__PURE__*/_jsx(LinearProgressDashed, {\n      className: classes.dashed,\n      ownerState: ownerState\n    }) : null, /*#__PURE__*/_jsx(LinearProgressBar1, {\n      className: classes.bar1,\n      ownerState: ownerState,\n      style: inlineStyles.bar1\n    }), variant === 'determinate' ? null : /*#__PURE__*/_jsx(LinearProgressBar2, {\n      className: classes.bar2,\n      ownerState: ownerState,\n      style: inlineStyles.bar2\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? LinearProgress.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'primary'\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['inherit', 'primary', 'secondary']), PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number,\n\n  /**\n   * The value for the buffer variant.\n   * Value between 0 and 100.\n   */\n  valueBuffer: PropTypes.number,\n\n  /**\n   * The variant to use.\n   * Use indeterminate or query when there is no progress value.\n   * @default 'indeterminate'\n   */\n  variant: PropTypes.oneOf(['buffer', 'determinate', 'indeterminate', 'query'])\n} : void 0;\nexport default LinearProgress;","import { CContainer, CRow, CCol, CCard, CCardHeader, CCardBody, CForm, CLabel, CInput, CButton, CModal, CModalBody, CModalHeader, CModalFooter, CTextarea } from '@coreui/react';\r\nimport React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { form, useFormik } from 'formik';\r\nimport { API, USER_ID } from '../../Config';\r\nimport swal from 'sweetalert';\r\nimport { fetchProjectsForPMThunk, fetchProjectsThunk } from '../../store/slices/ProjectsSlice';\r\nimport { fetchWbsThunk } from '../../store/slices/WbsSlice';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\n\r\nconst WbsModal = (props) => {\r\n    console.log('props wbs modal: ', props)\r\n    // const modalData = useSelector(state => state.wbs.data)\r\n    const [deliverableView, setDeliverableView] = useState(true);\r\n    const [hrsWorked, setHrsWorked] = useState(true);\r\n    const dispatch = useDispatch()\r\n    const wbsStatusArray = [{\r\n        \"title\": \"To Do\",\r\n        \"status\": 1\r\n    }, {\r\n        \"title\": \"Ongoing\",\r\n        \"status\": 2\r\n    }, {\r\n        \"title\": \"Done\",\r\n        \"status\": 3\r\n    }]\r\n\r\n    const updateWbs = (data) => {\r\n        console.log(\"formWbsUpdate:\", data.remaining_hours)\r\n        data.remaining_hours = props.data.project.remaining_hours - formWbsUpdate.values.hours_worked;\r\n        API.put('wbs/update/' + props.data.id + '/', formWbsUpdate.values).then((res) => {\r\n            console.log('update result', res)\r\n            if (res.status == 200 && res.data.success == 'True') {\r\n                dispatch(fetchProjectsForPMThunk(sessionStorage.getItem(USER_ID)))\r\n                dispatch(fetchProjectsThunk(sessionStorage.getItem(USER_ID)))\r\n                dispatch(fetchWbsThunk(sessionStorage.getItem(USER_ID)))\r\n                swal({\r\n                    title: \"Good job!\",\r\n                    text: res.data.message,\r\n                    icon: \"success\",\r\n                });\r\n                props.onClose()\r\n            }\r\n        })\r\n    }\r\n\r\n    const validateWbsCreateForm = (values) => {\r\n        const errors = {};\r\n        if (!values.title) errors.title = \"Title is required!\";\r\n        if (!values.actual_work_done) errors.actual_work_done = \"Actual work done today is required! (250 charracters)\";\r\n        return errors;\r\n    }\r\n\r\n    const formWbsUpdate = useFormik({\r\n        initialValues: {\r\n            project: props.data.project.id,\r\n            assignee: props.data.assignee.id,\r\n            title: props.data.title,\r\n            status: props.data.status,\r\n            description: props.data.description,\r\n            start_date: props.data.start_date,\r\n            end_date: props.data.end_date,\r\n            hours_worked: props.data.hours_worked,\r\n            progress: props.data.progress,\r\n            comments: props.data.comments,\r\n            deliverable: props.data.deliverable,\r\n            date_updated: '',\r\n            actual_work_done: '',\r\n            remaining_hours: ''\r\n        },\r\n        validateOnChange: true,\r\n        validateOnBlur: true,\r\n        validate: validateWbsCreateForm,\r\n        onSubmit: (values) => updateWbs(values)\r\n    })\r\n\r\n    function is_form_submitting() {\r\n        console.log(formWbsUpdate.isSubmitting, formWbsUpdate.isValidating)\r\n        if (formWbsUpdate.isSubmitting && !formWbsUpdate.isValidating) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CModal closeOnBackdrop={false} closeOnBackdrop={false} show={props.show} onClose={props.toggle} size=\"xl\">\r\n                <CModalHeader closeButton>\r\n                    {props.data.project && props.data.project.task_delivery_order.title + \" / \"}\r\n                    {props.data.project && props.data.project.sub_task + \" / \"}\r\n                    {props.data.project && props.data.project.task_title}\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <CRow>\r\n                        <div className=\"col-lg-8 mb-3 border-right\">\r\n                            <CForm>\r\n                                <CRow>\r\n                                    <div className=\"col-lg-12 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            Title\r\n                                        </CLabel>\r\n                                        <CInput id=\"title\" name=\"title\" className=\"custom-forminput-5\" onChange={formWbsUpdate.handleChange} value={formWbsUpdate.values.title} />\r\n                                        {formWbsUpdate.errors.title && <p className=\"error\" style={{ fontSize: '14px !important' }}>{formWbsUpdate.errors.title}</p>}\r\n                                    </div>\r\n                                    {/* <div className=\"col-lg-3 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            Status\r\n                                        </CLabel>\r\n                                        <select id=\"status\" name=\"status\" className=\"form-select\" onChange={formWbsUpdate.handleChange} value={formWbsUpdate.values.status}>\r\n                                            {wbsStatusArray.map((item, idx) => (\r\n                                                <option key={idx} value={item.status}>{item.title}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                    </div> */}\r\n                                </CRow>\r\n                                <CRow>\r\n                                    <div className=\"col-lg-12 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            Descriptions\r\n                                        </CLabel>\r\n                                        <CTextarea id=\"description\" name=\"description\" className=\"custom-forminput-5 text-box-height\" onChange={formWbsUpdate.handleChange} value={formWbsUpdate.values.description}></CTextarea>\r\n                                    </div>\r\n                                </CRow>\r\n                                <CRow>\r\n                                    <div className=\"col-lg-6 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            Start date\r\n                                        </CLabel>\r\n                                        <CInput id=\"start_date\" name=\"start_date\" type=\"date\" className=\"custom-forminput-5\" onChange={formWbsUpdate.handleChange} value={formWbsUpdate.values.start_date}></CInput>\r\n                                    </div>\r\n                                    <div className=\"col-lg-6 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            End date\r\n                                        </CLabel>\r\n                                        <CInput id=\"end_date\" name=\"end_date\" type=\"date\" className=\"custom-forminput-5\" onChange={formWbsUpdate.handleChange} value={formWbsUpdate.values.end_date}></CInput>\r\n                                    </div>\r\n                                </CRow>\r\n                                {/*Actual work today */}\r\n                                <CRow>\r\n                                    <div className=\"col-lg-12 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">Actual Work Today</CLabel>\r\n                                        <CInput id=\"actual_work_done\" type=\"text\" name=\"actual_work_done\" className=\"custom-forminpput-5\" onChange={(e) => {\r\n                                            formWbsUpdate.setFieldValue('actual_work_done', e.target.value); if (e.target.value == null || e.target.value.length == 0) { setHrsWorked(true) } else { setHrsWorked(false) }\r\n                                        }\r\n                                        } value={formWbsUpdate.values.actual_work_done}></CInput>\r\n                                        {formWbsUpdate.errors.actual_work_done && <p className=\"error\" style={{ fontSize: '14px !important' }}>{formWbsUpdate.errors.actual_work_done}</p>}\r\n                                    </div>\r\n                                </CRow>\r\n                                <CRow>\r\n                                    <div className=\"col-lg-6 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            Hours worked\r\n                                        </CLabel>\r\n                                        <CInput id=\"hours_worked\" name=\"hours_worked\" type=\"number\" className=\"custom-forminput-5\" onChange={formWbsUpdate.handleChange} value={formWbsUpdate.values.hours_worked} disabled={hrsWorked}></CInput>\r\n                                    </div>\r\n                                    <div className=\"col-lg-6 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            Progress(%)\r\n                                        </CLabel>\r\n                                        <CInput id=\"progress\" name=\"progress\" type=\"number\" max=\"100\" className=\"custom-forminput-5\" onChange={(e) => {\r\n                                            formWbsUpdate.setFieldValue('progress', e.target.value); if (e.target.value == '100') {\r\n                                                setDeliverableView(false);\r\n                                                formWbsUpdate.setFieldValue('deliverable', formWbsUpdate.values.deliverable)\r\n                                            } else {\r\n                                                setDeliverableView(true);\r\n                                                formWbsUpdate.setFieldValue('deliverable', \"\")\r\n                                            }\r\n                                        }} value={formWbsUpdate.values.progress}></CInput>\r\n                                    </div>\r\n                                </CRow>\r\n                                <CRow>\r\n                                    <div className=\"col-lg-12 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            Comments\r\n                                        </CLabel>\r\n                                        <CTextarea id=\"comments\" name=\"comments\" className=\"custom-forminput-5\" onChange={formWbsUpdate.handleChange} value={formWbsUpdate.values.comments}></CTextarea>\r\n                                    </div>\r\n                                </CRow>\r\n                                <CRow>\r\n                                    <div className=\"col-lg-12 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            Deliverable\r\n                                        </CLabel>\r\n                                        <CInput id=\"deliverable\" name=\"deliverable\" className=\"custom-forminput-5\" onChange={formWbsUpdate.handleChange} value={formWbsUpdate.values.deliverable} disabled={deliverableView} ></CInput>\r\n                                    </div>\r\n                                </CRow>\r\n                                {props.data.assignee.id == sessionStorage.getItem(USER_ID) && <div>{is_form_submitting() == true ? <LinearProgress /> :\r\n                                    <div>\r\n                                        <CButton type=\"button\" onClick={formWbsUpdate.handleSubmit} color=\"primary\">Update</CButton>{' '}\r\n                                        <CButton\r\n                                            color=\"secondary\"\r\n                                            onClick={props.toggle}\r\n                                        >Cancel</CButton>\r\n                                    </div>}\r\n                                </div>}\r\n                            </CForm>\r\n                        </div>\r\n                        <div className=\"col-lg-4 mb-3\">\r\n                            <div>\r\n                                <p>\r\n                                    Assignee:\r\n                                    <br></br>\r\n                                    {/* Pial Noman */}\r\n                                    <span className=\"wbs-reporter-name\">{props.data.assignee?.first_name != undefined && props.data.assignee.first_name + \" \" + props.data.assignee.last_name}</span>\r\n                                </p>\r\n                                <p>\r\n                                    Reporter:\r\n                                    <br></br>\r\n                                    {/* Pial Noman */}\r\n                                    <span className=\"wbs-reporter-name\">{props.data.reporter?.first_name != undefined && props.data.reporter.first_name + \" \" + props.data.reporter.last_name}</span>\r\n                                </p>\r\n                                <p>\r\n                                    Remaining hours:\r\n                                    <br></br>\r\n                                    {props.data.project?.remaining_hours}\r\n                                </p>\r\n                                {/**task list show */}\r\n                                <div className=\"task-list\">\r\n                                    <p>Task List:</p>\r\n                                    <ol className=\"task-list-show\">\r\n                                        {props.timeCardList?.data != undefined ? (Array.from(props.timeCardList.data).map((item) => (\r\n                                            <li className=\"task-list-show-item\">\r\n                                                {item.actual_work_done + \" ➤ \" + item.hours_today + \" hr(s)\"}\r\n                                                 {/* By {item.time_card_assignee.first_name + \" \" + item.time_card_assignee.last_name}  */}\r\n                                                <p><small>@ {item.date_updated} </small></p>\r\n                                            </li>\r\n                                        ))) : (\"No task has been done so far.\")}\r\n                                    </ol>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </CRow>\r\n                </CModalBody>\r\n            </CModal>\r\n        </>\r\n    )\r\n}\r\nexport default WbsModal;"],"sourceRoot":""}