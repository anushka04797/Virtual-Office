{"version":3,"sources":["pages/employees/Employees.js"],"names":["Employees","useHistory","useState","columns","field","headerName","width","type","description","sortable","valueGetter","params","row","firstName","lastName","renderCell","onClick","e","stopPropagation","api","thisRow","getAllColumns","filter","c","forEach","getValue","id","alert","JSON","stringify","variant","component","mb","style","height","disableSelectionOnClick","rows","age","pageSize","rowsPerPageOptions","components","Toolbar","GridToolbar","onRowClick","rowData","console","log"],"mappings":"6MAiJeA,UAvIG,WACAC,cAAd,IACA,EAAkCC,mBAAS,CACvC,CAAE,IAAK,EAAG,KAAQ,SADtB,mBAGMC,GAHN,UAGgB,CACZ,CAAEC,MAAO,KAAMC,WAAY,cAAeC,MAAO,KACjD,CAAEF,MAAO,OAAQC,WAAY,OAAQC,MAAO,KAC5C,CAAEF,MAAO,QAASC,WAAY,QAASC,MAAO,KAC9C,CACIF,MAAO,MACPC,WAAY,MACZE,KAAM,SACND,MAAO,IAEX,CACIF,MAAO,WACPC,WAAY,YACZG,YAAa,sDACbC,UAAU,EACVH,MAAO,IACPI,YAAa,SAACC,GAAD,gBACNA,EAAOC,IAAIC,WAAa,GADlB,YACwBF,EAAOC,IAAIE,UAAY,MAEhE,CACIV,MAAO,SACPC,WAAY,SACZI,UAAU,EACVM,WAAY,SAACJ,GAcX,OAAO,cAAC,IAAD,CAAQK,QAbC,SAACC,GACfA,EAAEC,kBAEF,IAAMC,EAAMR,EAAOQ,IACbC,EAAU,GAMhB,OAJAD,EAAIE,gBAAgBC,QAAO,SAACC,GAAD,MAAmB,cAAZA,EAAEnB,SAA2BmB,KAAGC,SAC9D,SAACD,GAAD,OAAQH,EAAQG,EAAEnB,OAASO,EAAOc,SAASd,EAAOe,GAAIH,EAAEnB,UAGrDuB,MAAMC,KAAKC,UAAUT,EAAS,KAAM,KAGtC,uBAejB,OACI,mCACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAYU,QAAQ,KAAKC,UAAU,MAAMC,GAAI,EAA7C,uBACA,qBAAKC,MAAO,CAAEC,OAAQ,IAAK5B,MAAO,QAAlC,SACI,cAAC,IAAD,CACI6B,yBAAyB,EACzBC,KApBf,CACT,CAAEV,GAAI,EAAGZ,SAAU,OAAQD,UAAW,MAAOwB,IAAK,IAClD,CAAEX,GAAI,EAAGZ,SAAU,YAAaD,UAAW,SAAUwB,IAAK,IAC1D,CAAEX,GAAI,EAAGZ,SAAU,YAAaD,UAAW,QAASwB,IAAK,IACzD,CAAEX,GAAI,EAAGZ,SAAU,QAASD,UAAW,OAAQwB,IAAK,IACpD,CAAEX,GAAI,EAAGZ,SAAU,YAAaD,UAAW,WAAYwB,IAAK,MAC5D,CAAEX,GAAI,EAAGZ,SAAU,aAAcD,UAAW,KAAMwB,IAAK,KACvD,CAAEX,GAAI,EAAGZ,SAAU,WAAYD,UAAW,UAAWwB,IAAK,IAC1D,CAAEX,GAAI,EAAGZ,SAAU,UAAWD,UAAW,UAAWwB,IAAK,IACzD,CAAEX,GAAI,EAAGZ,SAAU,QAASD,UAAW,SAAUwB,IAAK,KAY9BlC,QAASA,EACTmC,SAAU,EACVC,mBAAoB,CAAC,GAErBC,WAAY,CACRC,QAASC,KAEbC,WAAY,SAACC,GAAaC,QAAQC,IAAIF,EAAQhC","file":"static/js/39.ec962e92.chunk.js","sourcesContent":["import { CBadge, CButton, CCard, CCardBody, CCardHeader, CCol, CContainer, CDataTable, CRow } from \"@coreui/react\";\r\nimport React, { useState } from \"react\";\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport Button from '@mui/material/Button';\r\nimport Card from '@mui/material/Card';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Typography from '@mui/material/Typography';\r\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\r\n\r\nconst Employees = () => {\r\n    let history = useHistory()\r\n    const [employees, setEmployees] = useState([\r\n        { '#': 1, 'Name': 'abc' }\r\n    ])\r\n    const columns = [\r\n        { field: 'id', headerName: 'Employee ID', width: 130 },\r\n        { field: 'Name', headerName: 'Name', width: 130 },\r\n        { field: 'Email', headerName: 'Email', width: 130 },\r\n        {\r\n            field: 'age',\r\n            headerName: 'Age',\r\n            type: 'number',\r\n            width: 90,\r\n        },\r\n        {\r\n            field: 'fullName',\r\n            headerName: 'Full name',\r\n            description: 'This column has a value getter and is not sortable.',\r\n            sortable: false,\r\n            width: 260,\r\n            valueGetter: (params) =>\r\n                `${params.row.firstName || ''} ${params.row.lastName || ''}`,\r\n        },\r\n        {\r\n            field: \"action\",\r\n            headerName: \"Action\",\r\n            sortable: false,\r\n            renderCell: (params) => {\r\n              const onClick = (e) => {\r\n                e.stopPropagation(); // don't select this row after clicking\r\n        \r\n                const api = params.api;\r\n                const thisRow = {};\r\n        \r\n                api.getAllColumns().filter((c) => c.field !== \"__check__\" && !!c).forEach(\r\n                    (c) => (thisRow[c.field] = params.getValue(params.id, c.field))\r\n                );\r\n        \r\n                return alert(JSON.stringify(thisRow, null, 4));\r\n              };\r\n        \r\n              return <Button onClick={onClick}>Click</Button>;\r\n            }\r\n          },\r\n    ];\r\n    const rows = [\r\n        { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },\r\n        { id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 42 },\r\n        { id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 45 },\r\n        { id: 4, lastName: 'Stark', firstName: 'Arya', age: 16 },\r\n        { id: 5, lastName: 'Targaryen', firstName: 'Daenerys', age: null },\r\n        { id: 6, lastName: 'Melisandre', firstName: null, age: 150 },\r\n        { id: 7, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },\r\n        { id: 8, lastName: 'Frances', firstName: 'Rossini', age: 36 },\r\n        { id: 9, lastName: 'Roxie', firstName: 'Harvey', age: 65 },\r\n    ];\r\n    return (\r\n        <>\r\n            <CContainer>\r\n                <CRow>\r\n                    <CCol>\r\n                        <Typography variant=\"h4\" component=\"div\" mb={2}>Employees</Typography>\r\n                        <div style={{ height: 500, width: '100%' }} >\r\n                            <DataGrid\r\n                                disableSelectionOnClick={true}\r\n                                rows={rows}\r\n                                columns={columns}\r\n                                pageSize={5}\r\n                                rowsPerPageOptions={[5]}\r\n                                // checkboxSelection\r\n                                components={{\r\n                                    Toolbar: GridToolbar,\r\n                                }}\r\n                                onRowClick={(rowData) => {console.log(rowData.row)}} \r\n                            />\r\n                        </div>\r\n                    </CCol>\r\n                </CRow>\r\n                {/* <CRow>\r\n                    <CCol>\r\n                        <Card sx={{ minWidth: 275 }}>\r\n                            <CardContent>\r\n                                <Typography variant=\"h5\" component=\"div\">\r\n                                    Employees\r\n                                </Typography>\r\n                                <CDataTable\r\n                                    items={employees}\r\n                                    fields={[\r\n                                        {\r\n                                            key: \"#\",\r\n                                            _style: { width: \"3%\" },\r\n                                            _classes: \"font-weight-bold\",\r\n                                        },\r\n                                        'Name',\r\n                                        'Employee ID',\r\n                                        'Email',\r\n                                        'Phone',\r\n                                        'Date Created',\r\n\r\n                                    ]}\r\n                                    primary\r\n                                    hover\r\n                                    striped\r\n                                    border={false}\r\n                                    outlined={false}\r\n                                    sorter\r\n                                    columnFilter\r\n                                    tableFilter\r\n                                    size=\"sm\"\r\n                                    itemsPerPage={10}\r\n                                    pagination\r\n                                    scopedSlots={{\r\n                                        'Action':\r\n                                            (item) => (\r\n                                                <td>\r\n                                                    <CBadge>\r\n                                                        <Button disabled={true} onClick={() => { }} type=\"button\" size=\"sm\" color=\"danger\">Delete</Button> <CButton onClick={() => { history.push({ pathname: '/dashboard/storages/details', state: { brand: item } }) }} size=\"sm\" type=\"button\" color=\"primary\">Edit</CButton>\r\n                                                    </CBadge>\r\n                                                </td>\r\n                                            )\r\n                                    }}\r\n                                />\r\n                            </CardContent>\r\n                            <CardActions>\r\n\r\n                            </CardActions>\r\n                        </Card>\r\n                    </CCol>\r\n                </CRow> */}\r\n            </CContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Employees"],"sourceRoot":""}