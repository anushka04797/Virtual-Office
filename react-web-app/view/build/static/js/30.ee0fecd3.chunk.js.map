{"version":3,"sources":["pages/weekly-timecards/WeeklyTimecards.js"],"names":["WeeklyTimecards","profile_details","useSelector","state","profile","data","useState","tableData","setTabledata","newArray","pdfData","setPdfData","startDate","setStartDate","endDate","setEndDate","projectList","setProjectList","setUserData","totalHrs","setTotalHrs","project","useSnackbar","enqueueSnackbar","closeSnackbar","getWeeklyTimecard","API","get","sessionStorage","getItem","USER_ID","then","res","start_date","end_date","undefined","forEach","item","idx","push","sub_task","newItem","id","time_card_assignee","actual_work_done","time_type","submitted","hours_today","date_created","date_updated","console","log","length","temp_array","temp_totalHrs","index","element","parseFloat","weekday","moment","toFixed","React","useEffect","window","scrollTo","useFormik","initialValues","wbs","time","hrs","validateOnBlur","validateOnChange","timeType","value","label","updateTimeCardHrs","event","target","Time","put","status","variant","className","md","onClick","doc","jsPDF","setFontSize","title","first_name","last_name","format","content","startY","head","body","map","elt","WBS","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Total","text","autoTable","save","exportPDF","name","csvData","fileName","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","type","Blob","FileSaver","exportToCSV","phone","Set","items","fields","key","_style","width","_classes","primary","hover","striped","bordered","size","scopedSlots","onChange","updateTimeCard","ele","selected","onBlur","defaultValue"],"mappings":"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","file":"static/js/30.ee0fecd3.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport \"../timecards/timeCards.css\";\r\nimport { useFormik } from \"formik\";\r\nimport { BASE_URL, USER_ID } from '../../Config';\r\nimport { API } from '../../Config';\r\nimport Select from \"react-select\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport * as FileSaver from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\nimport CIcon from '@coreui/icons-react';\r\nimport moment from \"moment\";\r\nimport { CDataTable, CCardBody, CCard, CForm, CButton, CInput, CBadge, CModal, CModalHeader, CModalTitle, CModalBody, CContainer, CRow, CCol, CLabel, CTextarea } from '@coreui/react';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport { useSnackbar } from \"notistack\";\r\n\r\nconst WeeklyTimecards = () => {\r\n    const profile_details = useSelector(state => state.profile.data)\r\n    const [tableData, setTabledata] = useState([]);\r\n    let newArray = [];\r\n    const [pdfData, setPdfData] = useState([])\r\n    const [pdfTitle, setPdfTitle] = useState();\r\n    const [startDate, setStartDate] = useState();\r\n    const [endDate, setEndDate] = useState();\r\n    const [projectList, setProjectList] = useState([]);\r\n    const [userData, setUserData] = useState([])\r\n    const [totalHrs, setTotalHrs] = useState(0);\r\n    const [editModal, setEditModal] = useState(false);\r\n    var project = []\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n    React.useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n        getWeeklyTimecard();\r\n    }, [])\r\n\r\n    function getWeeklyTimecard(){\r\n        API.get('wbs/user-wise/weekly-time-card/' + sessionStorage.getItem(USER_ID) + '/').then((res) => {\r\n            setStartDate(res.data.start_date);\r\n            setEndDate(res.data.end_date);\r\n            if (res.data.data != undefined) {\r\n                res.data.data.forEach((item, idx) => {\r\n                    project.push(item.project.sub_task)\r\n                    var newItem = {\r\n                        id: item.id,\r\n                        project: item.project,\r\n                        time_card_assignee: item.time_card_assignee,\r\n                        actual_work_done: item.actual_work_done,\r\n                        time_type: item.time_type,\r\n                        submitted: item.submitted,\r\n                        hours_today: item.hours_today,\r\n                        date_created: item.date_created,\r\n                        date_updated: item.date_updated\r\n                    };\r\n                    newArray.push(newItem);\r\n                });\r\n            }\r\n            console.log(project)\r\n            console.log('new array', newArray)\r\n            setPdfData(newArray);\r\n            {/**let's populate the damn table,shall we?**/ }\r\n            if (newArray.length != 0 || newArray != undefined) {\r\n                let temp_array = []\r\n                var temp_totalHrs = 0;\r\n                for (let index = 0; index < newArray.length; index++) {\r\n                    const element = newArray[index];\r\n                    temp_totalHrs += parseFloat(element.hours_today);\r\n                    console.log(element.date_updated)\r\n                    var weekday = moment(element.date_updated).weekday();\r\n                    {/**final push to gtable */ }\r\n                    temp_array.push({\r\n                        'No.': index + 1,\r\n                        'id': element.id,\r\n                        'WBS': element.actual_work_done,\r\n                        'Time': element.time_type,\r\n                        'Sunday': weekday == 0 ? element.hours_today : '',\r\n                        'Monday': weekday == 1 ? element.hours_today : '',\r\n                        'Tuesday': weekday == 2 ? element.hours_today : '',\r\n                        'Wednesday': weekday == 3 ? element.hours_today : '',\r\n                        'Thursday': weekday == 4 ? element.hours_today : '',\r\n                        'Friday': weekday == 5 ? element.hours_today : '',\r\n                        'Saturday': weekday == 6 ? element.hours_today : '',\r\n                        'Total': element.hours_today\r\n                    })\r\n                    console.log(moment(element.date_updated).weekday())\r\n                }\r\n                temp_array.push({\r\n                    'No.': '',\r\n                    'id': '',\r\n                    'WBS': '',\r\n                    'Time': '',\r\n                    'Sunday': '',\r\n                    'Monday': '',\r\n                    'Tuesday': '',\r\n                    'Wednesday': '',\r\n                    'Thursday': '',\r\n                    'Friday': '',\r\n                    'Saturday': '',\r\n                    'Total': 'Total = ' + temp_totalHrs.toFixed(1)\r\n                })\r\n                setTabledata(temp_array)\r\n                setUserData(temp_array)\r\n                setTotalHrs(temp_totalHrs.toFixed(1))\r\n                console.log(\"tabledata from weekly timecard\", totalHrs)\r\n            }\r\n        })\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        setProjectList(project);\r\n    }, []);\r\n\r\n    {/*initialize form */ }\r\n    const editForm = useFormik({\r\n        initialValues: {\r\n            wbs: \"\",\r\n            time: \"\",\r\n            hrs: \"\",\r\n\r\n        },\r\n        validateOnBlur: true,\r\n        validateOnChange: true,\r\n        // onSubmit: getTimeCards\r\n    })\r\n\r\n    {/**export fetched tabledata to excel */ }\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const fileExtension = '.xlsx';\r\n    const exportToCSV = (csvData, fileName) => {\r\n        console.log(csvData)\r\n        var temp_data = []\r\n        const ws = XLSX.utils.json_to_sheet(csvData);\r\n        const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    }\r\n\r\n    /**export fetched data to pdf */\r\n    const exportPDF = () => {\r\n        const unit = \"pt\";\r\n        const size = \"A4\"; // Use A1, A2, A3 or A4\r\n        const orientation = \"landscape\"; // portrait or landscape\r\n        const marginLeft = 40;\r\n        const doc = new jsPDF(orientation, unit, size);\r\n        doc.setFontSize(12);\r\n        const title = profile_details.first_name + \"_\" + profile_details.last_name + \"_\" + \"Timecard_\" + moment(startDate).format(\"DD/MM/YYYY\") + \"-\" + moment(endDate).format(\"DD/MM/YYYY\");\r\n        const headers = [[\r\n            \"No.\",\r\n            \"WBS\",\r\n            \"Time\",\r\n            \"Sunday\",\r\n            \"Monday\",\r\n            \"Tuesday\",\r\n            \"Wednesday\",\r\n            \"Thursday\",\r\n            \"Friday\",\r\n            \"Saturday\",\r\n            \"Total\"\r\n        ]];\r\n        console.log(\"pdfData\", pdfData)\r\n        const uData = tableData.map((elt, idx) => [\r\n            idx + 1,\r\n            elt.WBS,\r\n            elt.Time,\r\n            elt.Sunday,\r\n            elt.Monday,\r\n            elt.Tuesday,\r\n            elt.Wednesday,\r\n            elt.Thursday,\r\n            elt.Friday,\r\n            elt.Saturday,\r\n            elt.Total\r\n        ])\r\n        let content = {\r\n            startY: 50,\r\n            head: headers,\r\n            body: uData\r\n        };\r\n        doc.text(title, marginLeft, 30);\r\n        doc.autoTable(content);\r\n        doc.save(profile_details.first_name + \"_\" + profile_details.last_name + \"_\" + \"Timecard_\" + moment(startDate).format(\"DD/MM/YYYY\") + \"-\" + moment(endDate).format(\"DD/MM/YYYY\") + \".pdf\")\r\n    }\r\n\r\n    const timeType = [\r\n        { value: \"RHR\", label: \"RHR\" },\r\n        { value: \"OTO\", label: \"OTO\" }\r\n    ]\r\n\r\n    function updateTimeCard(event, item) {\r\n        console.log(event.target.value, item)\r\n        var data = {\r\n            \"time_type\": event.target.value,\r\n            \"hours_today\": item.Total,\r\n            \"date_updated\": \"\"\r\n        }\r\n        API.put('wbs/time-card/update/' + item.id + '/', data).then((res) => {\r\n            console.log(res)\r\n            if(res.status === 200){\r\n                getWeeklyTimecard();\r\n                enqueueSnackbar('Time type update succefull.', { variant: 'info' })\r\n            }\r\n        })\r\n    }\r\n\r\n    function updateTimeCardHrs(event, item) {\r\n        console.log(event.target.value, item)\r\n        var data = {\r\n            \"time_type\": item.Time,\r\n            \"hours_today\": event.target.value,\r\n            \"date_updated\": \"\"\r\n        }\r\n        API.put('wbs/time-card/update/' + item.id + '/', data).then((res) => {\r\n            console.log(res)\r\n            if(res.status === 200){\r\n                getWeeklyTimecard();\r\n                enqueueSnackbar('Actual hours update succefull.', { variant: 'info' })\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CContainer>\r\n                <h3 className=\"timecards-page-header mb-3\">Weekly Timecard</h3>\r\n                <CRow>\r\n                    {/**Export buttons */}\r\n                    {tableData.length != 0 && <CCol md=\"12\">\r\n                        <h5 className=\"tiny-header--5 mt-0\">Export</h5>\r\n                        <div className=\"format-buttons mt-3 mb-3\">\r\n                            <CButton className=\"file-format-download\" onClick={() => exportPDF()}><CIcon name=\"cil-description\" className=\"mr-2\" />PDF</CButton>\r\n                            <CButton className=\"file-format-download\" onClick={() => exportToCSV(tableData, profile_details.first_name + \"_\" + profile_details.last_name + \"_\" + \"Timecard_\" + moment(startDate).format(\"DD/MM/YYYY\") + \"-\" + moment(endDate).format(\"DD/MM/YYYY\"))} ><CIcon name=\"cil-spreadsheet\" className=\"mr-2\" />Excel</CButton>\r\n                            {/* <CButton className=\"file-format-download\">Print</CButton> */}\r\n                        </div>\r\n                    </CCol>\r\n                    }\r\n                    {/**view timecard data */}\r\n                    <CCol md=\"4\">\r\n                        Name: {profile_details.first_name + \" \" + profile_details.last_name}<br />\r\n                        Phone: +{profile_details.phone}\r\n                    </CCol>\r\n                    <CCol md=\"4\">\r\n                        Week: {moment(startDate).format(\"DD/MM/YYYY\")} - {moment(endDate).format(\"DD/MM/YYYY\")} <br />\r\n                        Month: {moment(endDate).format('MMMM')} <br />\r\n                        Year: {moment(endDate).format('YYYY')}\r\n                    </CCol>\r\n                    <CCol md=\"4\">\r\n                        Project Name(s): {[...new Set(projectList)].map((item, idx) => (\r\n                            <span>{item}{idx < projectList.length - 1 && <span>, </span>}</span>\r\n                        ))}\r\n                    </CCol>\r\n                    {<CCol md=\"12\">\r\n                        <div className=\"mt-4 mb-2\">\r\n                            <CDataTable items={tableData} fields={[\r\n                                {\r\n                                    key: \"No.\",\r\n                                    _style: { width: \"auto\" },\r\n                                    _classes: \"font-weight-bold\",\r\n                                },\r\n                                'WBS',\r\n                                {\r\n                                    key: 'Time',\r\n                                    _style: { width: '100px' }\r\n                                },\r\n                                {\r\n                                    key: 'Sunday',\r\n                                    _style: { width: '70px' }\r\n                                },\r\n                                {\r\n                                    key: 'Monday',\r\n                                    _style: { width: '70px' }\r\n                                },\r\n                                {\r\n                                    key: 'Tuesday',\r\n                                    _style: { width: '70px' }\r\n                                },\r\n                                {\r\n                                    key: 'Wednesday',\r\n                                    _style: { width: '70px' }\r\n                                },\r\n                                {\r\n                                    key: 'Thursday',\r\n                                    _style: { width: '70px' }\r\n                                },\r\n                                {\r\n                                    key: 'Friday',\r\n                                    _style: { width: '70px' }\r\n                                },\r\n                                {\r\n                                    key: 'Saturday',\r\n                                    _style: { width: '70px' }\r\n                                },\r\n                                {\r\n                                    key: 'Total',\r\n                                    _style: { width: 'auto' }\r\n                                },\r\n                            ]}\r\n                                primary\r\n                                hover\r\n                                striped\r\n                                bordered\r\n                                size=\"sm\"\r\n                                scopedSlots={{\r\n                                    'Time':\r\n                                        (item, index) => {\r\n                                            return (\r\n                                                <td className=\"py-2\">\r\n                                                    {item.Time != \"\" && <select onChange={(event) => { updateTimeCard(event, item) }}>\r\n                                                        {timeType.map(ele => (\r\n                                                            <option selected={ele.value == item.Time}>{ele.value}</option>\r\n                                                        ))\r\n                                                        }\r\n                                                    </select>}\r\n                                                </td>\r\n                                            )\r\n                                        },\r\n                                    'Sunday':\r\n                                        (item, index) => {\r\n                                            return (\r\n                                                <td className=\"py-2\">\r\n                                                    {item.Sunday != \"\" && <CInput name=\"Sunday\" type=\"number\" onBlur={(event) => { updateTimeCardHrs(event, item) }} defaultValue={item.Sunday} className=\"custom-forminput-6\" />}\r\n                                                </td>\r\n                                            )\r\n                                        },\r\n                                    'Monday':\r\n                                        (item, index) => {\r\n                                            return (\r\n                                                <td className=\"py-2\">\r\n                                                    {item.Monday != \"\" && <CInput name=\"Monday\" type=\"number\" onBlur={(event) => { updateTimeCardHrs(event, item) }} defaultValue={item.Monday} className=\"custom-forminput-6\" />}\r\n                                                </td>\r\n                                            )\r\n                                        },\r\n                                    'Tuesday':\r\n                                        (item, index) => {\r\n                                            return (\r\n                                                <td className=\"py-2\">\r\n                                                    {item.Tuesday != \"\" && <CInput name=\"Tuesday\" type=\"number\" onBlur={(event) => { updateTimeCardHrs(event, item) }} defaultValue={item.Tuesday} className=\"custom-forminput-6\" />}\r\n                                                </td>\r\n                                            )\r\n                                        },\r\n                                    'Wednesday':\r\n                                        (item, index) => {\r\n                                            return (\r\n                                                <td className=\"py-2\">\r\n                                                    {item.Wednesday != \"\" && <CInput name=\"Wednesday\" type=\"number\" onBlur={(event) => { updateTimeCardHrs(event, item) }} defaultValue={item.Wednesday} className=\"custom-forminput-6\" />}\r\n                                                </td>\r\n                                            )\r\n                                        },\r\n                                    'Thursday':\r\n                                        (item, index) => {\r\n                                            return (\r\n                                                <td className=\"py-2\">\r\n                                                    {item.Thursday != \"\" && <CInput name=\"Thursday\" type=\"number\" onBlur={(event) => { updateTimeCardHrs(event, item) }} defaultValue={item.Thursday} className=\"custom-forminput-6\" />}\r\n                                                </td>\r\n                                            )\r\n                                        },\r\n                                    'Friday':\r\n                                        (item, index) => {\r\n                                            return (\r\n                                                <td className=\"py-2\">\r\n                                                    {item.Friday != \"\" && <CInput name=\"Friday\" type=\"number\" onBlur={(event) => { updateTimeCardHrs(event, item) }} defaultValue={item.Friday} className=\"custom-forminput-6\" />}\r\n                                                </td>\r\n                                            )\r\n                                        },\r\n                                    'Saturday':\r\n                                        (item, index) => {\r\n                                            return (\r\n                                                <td className=\"py-2\">\r\n                                                    {item.Saturday != \"\" && <CInput name=\"Saturday\" type=\"number\" onBlur={(event) => { updateTimeCardHrs(event, item) }} defaultValue={item.Saturday} className=\"custom-forminput-6\" />}\r\n                                                </td>\r\n                                            )\r\n                                        },\r\n                                }}\r\n                            >\r\n                            </CDataTable>\r\n                        </div>\r\n                    </CCol>}\r\n                </CRow>\r\n            </CContainer>\r\n        </>\r\n    )\r\n}\r\nexport default WeeklyTimecards;"],"sourceRoot":""}