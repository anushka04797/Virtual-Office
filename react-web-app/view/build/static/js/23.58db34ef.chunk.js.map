{"version":3,"sources":["components/linear-progress-bar/linear-progress-bar.js","pages/completed-project/completedProject.js"],"names":["LinearProgressWithLabel","props","sx","display","alignItems","width","mr","variant","minWidth","color","Math","round","value","LinearWithValueLabel","React","progress","CompleteProjects","historyTo","useHistory","projects","useSelector","state","data","filter","project","status","useState","show_sub_task_details","setShowSubTaskDetails","selectedSubTask","setSelectedSubTask","calculate_progress_in_percentage","total_hours","remaining_hours","parseFloat","xlData","closeOnBackdrop","size","alignment","show","onClose","closeButton","className","IconButton","disabled","fontSize","undefined","task_delivery_order","title","task_title","pm","first_name","last_name","work_package_number","estimated_person","assignees","planned_value","planned_hours","Array","from","length","map","item","idx","assignee","onClick","i","subTaskNames","subtasks","el","push","subTaskName","join","assigneNames","assigneName","work_package_index","sub_task","planned_delivery_date","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","type","Blob","FileSaver","fileName","exportToCSV","name","allowMultipleExpanded","allowZeroExpanded","String","toUpperCase","pathname","remaining","total","parseInt","task","console","log","src","profile_pic","BASE_URL","date_created"],"mappings":"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","file":"static/js/23.58db34ef.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\n\r\nfunction LinearProgressWithLabel(props) {\r\n  return (\r\n    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n      <Box sx={{ width: '100%', mr: 1 }}>\r\n        <LinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box sx={{ minWidth: 35 }}>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">{`${Math.round(\r\n          props.value,\r\n        )}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nLinearProgressWithLabel.propTypes = {\r\n  /**\r\n   * The value of the progress indicator for the determinate and buffer variants.\r\n   * Value between 0 and 100.\r\n   */\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default function LinearWithValueLabel(props) {\r\n  const [progress, setProgress] = React.useState(props.progress);\r\n  \r\n  React.useEffect(() => {\r\n    // const timer = setInterval(() => {\r\n    //   setProgress((prevProgress) => (prevProgress >= 100 ? 10 : prevProgress + 10));\r\n    // }, 800);\r\n    // return () => {\r\n    //   clearInterval(timer);\r\n    // };\r\n  }, []);\r\n\r\n  return (\r\n    <Box sx={{ width: '100%' }}>\r\n      <LinearProgressWithLabel value={progress} />\r\n    </Box>\r\n  );\r\n}","import { CCard, CModalTitle, CCardBody, CButton, CModal, CModalHeader, CModalBody, CContainer, CForm, CRow, CAlert } from '@coreui/react';\r\nimport GradeIcon from '@material-ui/icons/Grade';\r\nimport '../ongoing-project-details/ongoingProjectDetails.css'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport React, { useState } from 'react';\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport { useSelector } from 'react-redux';\r\nimport { BASE_URL } from '../../Config';\r\nimport '../my-projects/myProjects.css';\r\nimport {\r\n    Accordion,\r\n    AccordionItem,\r\n    AccordionItemHeading,\r\n    AccordionItemButton,\r\n    AccordionItemPanel,\r\n} from 'react-accessible-accordion';\r\nimport 'react-accessible-accordion/dist/fancy-example.css';\r\nimport SubTaskDetailsModal from '../../components/subtask-details-modal/SubTaskDetailsModal';\r\nimport LinearWithValueLabel from '../../components/linear-progress-bar/linear-progress-bar';\r\nimport * as FileSaver from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\nconst CompleteProjects = () => {\r\n    let historyTo = useHistory();\r\n    const projects = useSelector(state => state.projects.data.filter((project) => project.project.status === 1))\r\n    const remaining_hours = (remaining, total) => {\r\n        return String(parseFloat(total) - parseFloat(remaining))\r\n    }\r\n    const [show_sub_task_details, setShowSubTaskDetails] = useState(false)\r\n    const [selectedSubTask, setSelectedSubTask] = useState()\r\n    function calculate_progress_in_percentage(total_hours, remaining_hours) {\r\n        let worked_hours = parseFloat(total_hours) - parseFloat(remaining_hours)\r\n        return (100 * worked_hours) / parseFloat(total_hours)\r\n    }\r\n     {/**export in excel */ }\r\n     const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n     const fileExtension = '.xlsx';\r\n     const fileName = 'Completed project(s) List';\r\n     const xlData = [];\r\n     const exportToCSV = () => {\r\n         for (let i = 0; i < projects.length; i++) {\r\n \r\n \r\n             const item = projects[i];\r\n             let subTaskNames = [];\r\n             var subTaskName;\r\n             Array.from(item.subtasks).map((el) => {\r\n                 subTaskNames.push(el.task_title)\r\n             })\r\n             subTaskName = subTaskNames.join(\",\");\r\n             let assigneNames = [];\r\n             var assigneName;\r\n             Array.from(item.assignees).map((el) => {\r\n                 assigneNames.push(el.first_name + ' ' + el.last_name)\r\n             })\r\n             assigneName = assigneNames.join(\",\");\r\n             xlData.push({ 'Sl. No': i + 1, 'TDO': item.project.task_delivery_order.title, 'Work Package Number': item.project.work_package_number, 'Work Package Index': item.project.work_package_index, 'Project Name': item.project.sub_task, 'Subtasks': subTaskName, 'Assignee(s)': assigneName, 'Planned Value': item.project.planned_value, 'Planned Hours': item.project.planned_hours, 'Planned Delivery Date': item.project.planned_delivery_date })\r\n         }\r\n         const ws = XLSX.utils.json_to_sheet(xlData);\r\n         const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\r\n         const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n         const data = new Blob([excelBuffer], { type: fileType });\r\n         FileSaver.saveAs(data, fileName + fileExtension);\r\n     }\r\n \r\n    return (\r\n        <>\r\n            {selectedSubTask && <CModal closeOnBackdrop={false} size=\"lg\" alignment=\"center\" show={show_sub_task_details} onClose={() => { setShowSubTaskDetails(!show_sub_task_details) }}>\r\n                <CModalHeader onClose={() => setShowSubTaskDetails(!show_sub_task_details)} closeButton>\r\n                    <CModalTitle className=\"modal-title-projects\">\r\n                        <span className=\"edit-profile-form-header\">Subtask Details</span>\r\n                    </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <CContainer>\r\n                        <CForm>\r\n                            <CRow>\r\n                                <div className=\"card-header-portion-ongoing\">\r\n                                    <h4 className=\"ongoing-card-header-1\">\r\n                                        <IconButton aria-label=\"favourite\" disabled size=\"medium\" color=\"primary\">\r\n                                            <GradeIcon fontSize=\"inherit\" className=\"fav-button\" />\r\n                                        </IconButton>\r\n                                        {selectedSubTask != undefined ? selectedSubTask.task_delivery_order.title : ''}\r\n                                    </h4>\r\n\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    <div className=\"col-md-12 col-sm-12 col-xs-12 col-lg-12 mt-1 mb-2\">\r\n                                        <CCard className=\"card-ongoing-project\">\r\n                                            <CCardBody className=\"details-project-body\">\r\n                                                <div className=\"ongoing-initial-info row\">\r\n                                                    <div className=\"tasks-done-2 col-lg-4\"><h6 className=\"tiny-header2\">Sub Task Name</h6>\r\n                                                        <h6 className=\"project-point-details\">{selectedSubTask.task_title}</h6></div>\r\n                                                    <div className=\"tasks-done-2 col-lg-4\"><h6 className=\"tiny-header2\">PM Name</h6>\r\n                                                        <h6 className=\"project-point-details\">{selectedSubTask.pm.first_name + ' ' + selectedSubTask.pm.last_name}</h6></div>\r\n                                                    <div className=\"tasks-done-2 col-lg-4\"><h6 className=\"tiny-header2\">Work Package Number</h6>\r\n                                                        <h6 className=\"project-point-details\">{selectedSubTask.work_package_number}</h6>\r\n                                                    </div>\r\n                                                    <div className=\"tasks-done-2 col-lg-4\"><h6 className=\"tiny-header2\">Task Title</h6>\r\n                                                        <h6 className=\"project-point-details\">{selectedSubTask.task_title}</h6>\r\n                                                    </div>\r\n                                                    <div className=\"tasks-done-2 col-lg-4\"><h6 className=\"tiny-header2\">Estimated Person(s)</h6>\r\n                                                        <h6 className=\"project-point-details\">{selectedSubTask.estimated_person}</h6>\r\n                                                    </div>\r\n                                                    <div className=\"tasks-done-2 col-lg-4\"><h6 className=\"tiny-header2\">Planned Value</h6>\r\n                                                        <h6 className=\"project-point-details\">{selectedSubTask.assignees[0].project.planned_value} </h6>\r\n                                                    </div>\r\n                                                    <div className=\"tasks-done-2 col-lg-4\"><h6 className=\"tiny-header2\">Planned Hours</h6>\r\n                                                        <h6 className=\"project-point-details\">{selectedSubTask.assignees[0].project.planned_hours} </h6>\r\n                                                    </div>\r\n                                                    <div className=\"tasks-done-2 col-lg-4\"><h6 className=\"tiny-header2\">Remaining Hours</h6>\r\n                                                        <h6 className=\"project-point-details\">{selectedSubTask.remaining_hours} </h6>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                                <div className=\"col-md-12 mt-4 mb-2\">\r\n                                                    <h5 className=\"projectName mb-3\">Asssignee(s)-({Array.from(selectedSubTask.assignees).length})</h5>\r\n                                                    <div className=\"file-show-ongoing-details row\">\r\n                                                        {selectedSubTask != undefined && Array.from(selectedSubTask.assignees).map((item, idx) => (\r\n                                                            <div key={idx} className=\"col-md-4 col-sm-6 col-lg-4\">\r\n                                                                <div className=\"file-attached-ongoing rounded-pill\">\r\n                                                                    {item.assignee.first_name + ' ' + item.assignee.last_name}\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        ))}\r\n                                                    </div>\r\n                                                </div>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </div>\r\n                                </div>\r\n                            </CRow>\r\n                        </CForm>\r\n                    </CContainer>\r\n                </CModalBody>\r\n            </CModal>}\r\n            {/* <SubTaskDetailsModal show={show_sub_task_details} onPressClose={setShowSubTaskDetails} selectedSubTask={selectedSubTask}/> */}\r\n            <div className=\"container\">\r\n               \r\n                <div className=\"row\">\r\n\r\n                    <div className=\"col-md-11 col-sm-12 col-xs-12 mt-1\">\r\n                    <h3 className=\"dash-header\">Completed Projects({projects.length}) <CButton className=\"export-project-list\" onClick={() => exportToCSV()}><CIcon name=\"cil-spreadsheet\" className=\"mr-2\"/>Export to excel</CButton></h3>\r\n                        {projects != undefined && <Accordion allowMultipleExpanded={false} className=\"remove-acc-bg\" allowZeroExpanded>\r\n                            {projects.map((project, idx) => (\r\n                                <AccordionItem key={idx} className=\"card-ongoing-project\">\r\n                                    <AccordionItemHeading className=\"ongoing-accordion-header\">\r\n                                        <AccordionItemButton>\r\n                                            <IconButton aria-label=\"favourite\" disabled size=\"medium\" >\r\n                                                <GradeIcon fontSize=\"inherit\" className=\"fav-button\" />\r\n\r\n                                            </IconButton>{String(project.project.sub_task).toUpperCase()}\r\n\r\n                                            <span className=\"fix-action-btn-alignment\">\r\n                                            <CButton className=\"view-ongoing-details\" onClick={() => historyTo.push({ pathname: '/dashboard/Projects/completed-projects/details/' + project.project.work_package_number, state: { project: project } })}><CIcon name=\"cil-list-rich\" className=\"mr-1\" />View Details</CButton>\r\n                                            </span>\r\n                                        </AccordionItemButton>\r\n                                    </AccordionItemHeading>\r\n                                    <AccordionItemPanel>\r\n                                        {/*task percentage portion */}\r\n                                        <div>\r\n                                            <h6 className=\"show-amount\">{remaining_hours(project.project.remaining_hours, project.project.planned_hours)}/{parseInt(project.project.planned_hours)} Hrs</h6>\r\n                                            <LinearWithValueLabel progress={calculate_progress_in_percentage(project.project.planned_hours, project.project.remaining_hours)} />\r\n                                        </div>\r\n\r\n                                        {/*Project category buttons */}\r\n                                        <div className=\"all-da-buttons-1\">\r\n                                            {Array.from(project.subtasks).length > 0 && Array.from(project.subtasks).map((task, idx) => (\r\n                                                <CButton className=\"package-button rounded-pill\" type=\"button\" onClick={() => { setShowSubTaskDetails(true); setSelectedSubTask(task); console.log('task', task) }}>\r\n                                                    {task.task_title}\r\n                                                    <span className=\"tooltiptext\">{task.work_package_index}</span>\r\n                                                </CButton>\r\n                                            ))}\r\n                                        </div>\r\n                                        {/*Project participants */}\r\n                                        <div className=\"all-da-workers1\">\r\n                                            {project.assignees.length > 0 && Array.from(project.assignees).map((assignee, idx) => (\r\n                                                <img className=\"img-fluid worker-image\" src={assignee.profile_pic != null ? BASE_URL + assignee.profile_pic : 'avatars/user-avatar-default.png'} />\r\n                                            ))}\r\n                                        </div>\r\n                                        {/*project info in text */}\r\n                                        <div className=\"information-show row\">\r\n                                            <div className=\"info-show-now col-md-6\">\r\n                                                <h5 className=\"project-details-points child\"><h5 className=\"info-header-1\">Assigned by :</h5>{project.project.pm.first_name + ' ' + project.project.pm.last_name}</h5>\r\n                                                <h5 className=\"project-details-points\"><h5 className=\"info-header-1\">Project Manager : </h5>{project.project.pm.first_name + ' ' + project.project.pm.last_name}</h5>\r\n                                            </div>\r\n                                            <div className=\"info-show-now col-md-6\">\r\n                                                <h5 className=\"project-details-points child\"><h5 className=\"info-header-1\">Start Date : </h5>{project.project.date_created}</h5>\r\n\r\n                                                <h5 className=\"project-details-points\"><h5 className=\"info-header-1\">Planned Delivery Date : </h5>{project.project.planned_delivery_date}</h5>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                    </AccordionItemPanel>\r\n                                </AccordionItem>\r\n                            ))}\r\n\r\n                        </Accordion>\r\n                        }\r\n\r\n                        \r\n                        {/**If no projects are there */}\r\n                        {projects == '' ? (\r\n\r\n\r\n\r\n                            <CAlert className=\"no-value-show-alert\" color=\"primary\">Currently there are no completed projects</CAlert>\r\n\r\n\r\n                        ) : null\r\n\r\n\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default CompleteProjects;"],"sourceRoot":""}