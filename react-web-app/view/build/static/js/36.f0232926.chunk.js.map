{"version":3,"sources":["pages/create-evms/createEVMS.js"],"names":["ProjectEVMS","history","useHistory","colourStyles","option","provided","state","fontSize","projects","useSelector","e","Array","from","pm_projects","forEach","item","idx","push","data","console","log","evmsList","f","uniqueProjects","filter","o1","some","o2","project","id","uniqueArray","value","label","task_delivery_order","title","sub_task","useDispatch","React","useEffect","window","scrollTo","useState","projectValue","setProjectValue","reset_form","formCreateEVMS","resetForm","create_evms","a","JSON","stringify","values","API","post","then","res","status","success","swal","useFormik","initialValues","work_package_number","earned_value","actual_cost","estimate_at_completion","estimate_to_completion","planned_value","planned_hours","variance_at_completion","budget_at_completion","validateOnChange","validateOnBlur","validate","errors","onSubmit","length","className","htmlFor","closeMenuOnSelect","placeholder","isClearable","isMulti","onChange","setValues","classNamePrefix","options","styles","undefined","color","estimated_person","planned_delivery_date","name","type","min","step","handleChange","required","readOnly","Math","abs","setFieldValue","target","onClick","handleSubmit","variant","pathname"],"mappings":"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","file":"static/js/36.f0232926.chunk.js","sourcesContent":["import {\r\n  CCard,\r\n  CContainer,\r\n  CRow,\r\n  CCardHeader,\r\n  CForm,\r\n  CLabel,\r\n  CInput,\r\n  CButton,\r\n  CAlert\r\n} from \"@coreui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { BASE_URL } from '../../Config';\r\nimport React, { useState } from \"react\";\r\nimport Select from \"react-select\";\r\nimport \"../createProject/createProject.css\";\r\nimport { fetchProjectsThunk, fetchProjectsForPMThunk, fetchProjectsAssigneeThunk, fetchWbsThunk } from '../../store/slices/ProjectsSlice';\r\nimport { fetchEvmsThunk } from \"../../store/slices/EvmsSlice\";\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useFormik } from 'formik';\r\nimport { API, USER_ID } from '../../Config';\r\nimport swal from 'sweetalert'\r\nconst ProjectEVMS = () => {\r\n  let history = useHistory();\r\n  const colourStyles = {\r\n    // control: (styles, state) => ({ ...styles,height:\"35px\", fontSize: '14px !important', lineHeight: '1.42857', borderRadius: \"8px\",borderRadius:\".25rem\",color:\"rgb(133,133,133)\",border:state.isFocused ? '2px solid #0065ff' :'inherit'}),\r\n    option: (provided, state) => ({ ...provided, fontSize: \"14px !important\" }),\r\n  };\r\n  const projects = useSelector(state => {\r\n    let e = []\r\n    Array.from(state.projects.pm_projects).forEach((item, idx) => {\r\n      // e.push({ value: item.project.id, label: item.project.task_delivery_order.title + '/' + item.project.sub_task, data: item })\r\n      e.push({ data: item })\r\n    })\r\n    console.log('e', e);\r\n    return e\r\n\r\n  })\r\n\r\n  console.log(\"pM projects\", projects);\r\n\r\n  const evmsList = useSelector(state => {\r\n    let f = []\r\n    Array.from(state.evmsList.data).forEach((item, idx) => {\r\n      f.push({ data: item })\r\n    })\r\n    return f\r\n\r\n  })\r\n\r\n  console.log('existing evms', evmsList)\r\n  {/**get only the unique values */ }\r\n  // const uniqueProjects = projects.filter(function(o1){\r\n  //   return !evmsList.some(function(o2){\r\n  //     return o1.project.id === o2.project.id\r\n  //   })\r\n\r\n  // })\r\n  const uniqueProjects = projects.filter(o1 => !evmsList.some(o2 => o1.data.project.id === o2.data.project.id));\r\n  console.log('unique projects', uniqueProjects)\r\n  const uniqueArray = [];\r\n  Array.from(uniqueProjects).forEach((item, idx) => {\r\n    uniqueArray.push({ value:item.data.project.id, label: item.data.project.task_delivery_order.title + '/' + item.data.project.sub_task, data: item })\r\n\r\n  })\r\n  console.log('uniqueArray', uniqueArray)\r\n\r\n\r\n\r\n  const dispatch = useDispatch();\r\n  React.useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    console.log('pm project list', projects)\r\n  }, [projects])\r\n\r\n\r\n\r\n\r\n  // const handleChange = (field, value) => {\r\n  //   switch (field) {\r\n  //     case \"projects\":\r\n\r\n  //       setProjectValue(value);\r\n\r\n\r\n  //       break;\r\n  //     case \"workPackage\":\r\n  //       setPackageValue(value);\r\n  //       break;\r\n  //     default:\r\n  //       break;\r\n  //   }\r\n  // };\r\n  const [projectValue, setProjectValue] = useState();\r\n\r\n\r\n  const getAssigneeList = (option) => {\r\n\r\n    // dispatch(fetchProjectsAssigneeThunk(option.data.project.work_package_number))\r\n    setProjectValue(option)\r\n\r\n    console.log('projectValue', option)\r\n    formCreateEVMS.setValues({\r\n      project: option.value,\r\n      planned_hours: option.data.data.project.planned_hours,\r\n      planned_value: option.data.data.project.planned_value,\r\n      work_package_number: option.data.data.project.work_package_number\r\n    })\r\n    // formCreateEVMS.setValues(project,option.value)\r\n\r\n    // formCreateEVMS.setFieldValue('planned_hours', option.data.data.project.planned_hours)\r\n    // formCreateEVMS.setFieldValue('planned_value', option.data.data.project.planned_value)\r\n    // formCreateEVMS.setFieldValue('work_package_number', option.data.data.project.work_package_number)\r\n\r\n    // setSelectedProjectEndDate(option.planned_delivery_date)\r\n  }\r\n\r\n  const reset_form = () => {\r\n    formCreateEVMS.resetForm()\r\n    setProjectValue(null);\r\n\r\n\r\n  }\r\n  {/**validation stuff */ }\r\n  const validate_evms_form = (values) => {\r\n    console.log('validating values', values)\r\n    const errors = {}\r\n    if (!values.project) errors.project = \"Project Selection is required\"\r\n    if (!values.earned_value) errors.earned_value = \"Earned Value is required\"\r\n    if (!values.actual_cost) errors.actual_cost = \"Actual Cost is required\"\r\n    if (!values.estimate_at_completion) errors.estimate_at_completion = \"Estimate at completion is required\"\r\n    if (!values.estimate_to_completion) errors.estimate_to_completion = \"Estimate to completion is required\"\r\n    if (!values.planned_value) errors.planned_value = \"Planned Value is required\"\r\n    if (!values.planned_hours) errors.planned_hours = \"Planned hours is required\"\r\n    if(!values.variance_at_completion)errors.variance_at_completion=\"Variance at completion is required\"\r\n    if (!values.budget_at_completion) errors.budget_at_completion = \"Budget at completion is required\"\r\n    return errors\r\n  }\r\n  const create_evms = async () => {\r\n    console.log('values', JSON.stringify(formCreateEVMS.values))\r\n    API.post('evms/create/', formCreateEVMS.values).then((res) => {\r\n      console.log(res)\r\n      if (res.status == 200 && res.data.success == 'True') {\r\n        reset_form()\r\n        swal('Created!', 'Successfuly Created', 'success')\r\n      }\r\n      else {\r\n        console.log(\"error\", res)\r\n        swal('Error!', 'Problem occured during creating EVMS', 'warning');\r\n      }\r\n    })\r\n  }\r\n  const formCreateEVMS = useFormik({\r\n    initialValues: {\r\n      project: \"\",\r\n      work_package_number: \"\",\r\n      earned_value: \"\",\r\n      actual_cost: \"\",\r\n      estimate_at_completion: \"\",\r\n      estimate_to_completion: \"\",\r\n      planned_value: \"\",\r\n      planned_hours: \"\",\r\n      variance_at_completion: \"\",\r\n      budget_at_completion: \"\"\r\n\r\n    },\r\n\r\n    validateOnChange: true,\r\n    validateOnBlur: true,\r\n    validate: validate_evms_form,\r\n    onSubmit: create_evms\r\n  })\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === 'Enter') {\r\n      create_evms(formCreateEVMS.values)\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <CContainer>\r\n\r\n        <CRow>\r\n          { (uniqueArray.length !=0 || evmsList.length == 0) ?(\r\n          <div className=\"col-lg-10 offset-lg-1 col-md-12\">\r\n            <CCard className=\"custom-project-card-1\">\r\n              <CCardHeader className=\"project-header-3\">\r\n                {\" \"}\r\n                <h4 className=\"section-name-projectcreate\">Create EVMS</h4>\r\n              </CCardHeader>\r\n              <CContainer>\r\n                <CForm className=\"mt-3\">\r\n                  <CRow>\r\n                    {/**Project Name */}\r\n                    <div className=\"col-lg-12 mb-3\">\r\n                      <CLabel className=\"custom-label-5\" htmlFor=\"projectName\">\r\n                        Project *\r\n                      </CLabel>\r\n                      <Select\r\n                        closeMenuOnSelect={true}\r\n                        aria-labelledby=\"projectName\"\r\n                        id=\"projectName\"\r\n                        // getOptionLabel={option => option.task_delivery_order.title + \" / \" + option.sub_task}\r\n                        // getOptionValue={option => option.id}\r\n                        placeholder=\"Select a project\"\r\n                        isClearable={false}\r\n                        isMulti={false}\r\n\r\n                        // onChange={(value) => handleChange(\"projects\", value)}\r\n                        onChange={getAssigneeList}\r\n                        classNamePrefix=\"custom-forminput-6\"\r\n\r\n                        options={uniqueArray}\r\n                        styles={colourStyles}\r\n                      />\r\n                      {/**View related TDO details */}\r\n                      {projectValue != undefined ?\r\n                        (<div className=\"mt-1\">\r\n                          <CAlert color=\"primary\">\r\n                            <small>\r\n                              <b>Work Package Number:</b> {projectValue.data.data.project.work_package_number}\r\n                              <br />\r\n                              <b>Estimated Persons: </b> {projectValue.data.data.project.estimated_person}\r\n                              <br />\r\n                              <b>Planned Delivery Date: </b> {projectValue.data.data.project.planned_delivery_date}\r\n                              <br />\r\n                              {/* <b>Assignee(s):</b><span> </span> */}\r\n\r\n\r\n                            </small>\r\n                          </CAlert>\r\n                        </div>\r\n                        ) :\r\n                        null}\r\n                      {/**Error show */}\r\n                      {formCreateEVMS.errors.project && <p className=\"error\">{formCreateEVMS.errors.project}</p>}\r\n                    </div>\r\n                    {/**Work package */}\r\n                 \r\n                    {/**Earned Value */}\r\n                    <div className=\"col-lg-6 mb-3\">\r\n                      <CLabel className=\"custom-label-5\" htmlFor=\"earned_value\">\r\n                        Earned Value *\r\n                      </CLabel>\r\n                      <CInput className=\"custom-forminput-6\" name=\"earned_value\" id=\"earned_value\" type=\"number\" min=\"0.00\" step=\"0.01\" value={formCreateEVMS.values.earned_value} onChange={formCreateEVMS.handleChange} required>\r\n\r\n                      </CInput>\r\n                      {/**Error show */}\r\n                      {formCreateEVMS.errors.earned_value && <p className=\"error\">{formCreateEVMS.errors.earned_value}</p>}\r\n                    </div>\r\n                    {/**Actual Cost */}\r\n                    <div className=\"col-lg-6 mb-3\">\r\n                      <CLabel className=\"custom-label-5\" htmlFor=\"actual_cost\">\r\n                        Actual Cost  *\r\n                      </CLabel>\r\n                      <CInput className=\"custom-forminput-6\" name=\"actual_cost\" id=\"actual_cost\" type=\"number\" min=\"0\" step=\"0.1\" value={formCreateEVMS.values.actual_cost} onChange={formCreateEVMS.handleChange} required />\r\n                      {/**Error show */}\r\n                      {formCreateEVMS.errors.actual_cost && <p className=\"error\">{formCreateEVMS.errors.actual_cost}</p>}\r\n                    </div>\r\n                    {/**estimate at completion */}\r\n                    <div className=\"col-lg-6 mb-3\">\r\n                      <CLabel className=\"custom-label-5\" htmlFor=\"estimate_at_completion\">\r\n                        Estimate at completion *\r\n                      </CLabel>\r\n                      <CInput className=\"custom-forminput-6\" name=\"estimate_at_completion\" id=\"estimate_at_completion\" type=\"number\" min=\"0\" step=\"0.1\" value={formCreateEVMS.values.estimate_at_completion} \r\n                        onChange={formCreateEVMS.handleChange} required />\r\n                      {/**error show */}\r\n                      {formCreateEVMS.errors.estimate_at_completion && <p className=\"error\">{formCreateEVMS.errors.estimate_at_completion}</p>}\r\n                    </div>\r\n                    {/**estimate to completion */}\r\n                    <div className=\"col-lg-6 mb-3\">\r\n                      <CLabel className=\"custom-label-5\" htmlFor=\"estimate_to_completion\">\r\n                        Estimate to completion *\r\n                      </CLabel>\r\n                      <CInput className=\"custom-forminput-6\" name=\"estimate_to_completion\" id=\"estimate_to_completion\" type=\"number\" min=\"0\" step=\"0.1\" value={formCreateEVMS.values.estimate_to_completion} onChange={formCreateEVMS.handleChange} required />\r\n                      {/**Error show */}\r\n                      {formCreateEVMS.errors.estimate_to_completion && <p className=\"error\">{formCreateEVMS.errors.estimate_to_completion}</p>}\r\n                    </div>\r\n                    {/**Planned Value */}\r\n\r\n                    <div className=\"col-lg-6 mb-3\">\r\n                      <CLabel className=\"custom-label-5\" htmlFor=\"planned_value\">\r\n                        Planned Value\r\n                      </CLabel>\r\n                      <CInput className=\"custom-forminput-6\" name=\"planned_value\" id=\"planned_value\" type=\"number\" min=\"0\" value={formCreateEVMS.values.planned_value} onChange={formCreateEVMS.handleChange} readOnly />\r\n                      {/**Error show */}\r\n                      {formCreateEVMS.errors.planned_value && <p className=\"error\">{formCreateEVMS.errors.planned_value}</p>}\r\n                    </div>\r\n                    {/**Planned hours */}\r\n                    <div className=\"col-lg-6 mb-3\">\r\n                      <CLabel className=\"custom-label-5\" htmlFor=\"planned_hours\">\r\n                        Planned Hours\r\n                      </CLabel>\r\n                      <CInput className=\"custom-forminput-6\" name=\"planned_hours\" id=\"planned_hours\" type=\"number\" min=\"1\" value={formCreateEVMS.values.planned_hours} onChange={formCreateEVMS.handleChange} readOnly />\r\n                      {/**Error show */}\r\n                      {formCreateEVMS.errors.planned_hours && <p className=\"error\">{formCreateEVMS.errors.planned_hours}</p>}\r\n                    </div>\r\n                    {/**variance at completion */}\r\n                    <div className=\"col-lg-6 mb-3\">\r\n                      <CLabel className=\"custom-label-5\" htmlFor=\"variance_at_completion\">\r\n                        Variance at completion *\r\n                      </CLabel>\r\n                      <CInput className=\"custom-forminput-6\" name=\"variance_at_completion\" id=\"variance_at_completion\" type=\"number\" min=\"0\" value={Math.abs(formCreateEVMS.values.budget_at_completion - formCreateEVMS.values.estimate_at_completion)} onChange={formCreateEVMS.handleChange} readOnly />\r\n                      {/**Error show */}\r\n                    </div>\r\n                    {/**budget at completion */}\r\n                    <div className=\"col-lg-6 mb-3\">\r\n                      <CLabel className=\"custom-label-5\" htmlFor=\"budget_at_completion\">\r\n                        Budget at completion *\r\n                      </CLabel>\r\n                      <CInput className=\"custom-forminput-6\" name=\"budget_at_completion\" id=\"budget_at_completion\" type=\"number\" min=\"0\" step=\"0.1\" value={formCreateEVMS.values.budget_at_completion} onChange={(e) => {formCreateEVMS.setFieldValue('budget_at_completion', e.target.value); formCreateEVMS.setFieldValue('variance_at_completion', Math.abs(formCreateEVMS.values.budget_at_completion - formCreateEVMS.values.estimate_at_completion))}} required />\r\n\r\n                      {/**Error show */}\r\n                      {formCreateEVMS.errors.budget_at_completion && <p className=\"error\">{formCreateEVMS.errors.budget_at_completion}</p>}\r\n                    </div>\r\n                    {/**submit buttons */}\r\n                    <div className=\"col-md-12\">\r\n                      <div className=\"project-form-button-holders mt-3\">\r\n                        <CButton className=\"create-btn-prjct create-prjct\" onClick={formCreateEVMS.handleSubmit} >Create EVMS</CButton>\r\n                        <CButton className=\"create-btn-prjct cancel-prjct\" onClick={reset_form}>Cancel</CButton>\r\n                      </div>\r\n                    </div>\r\n\r\n                  </CRow>\r\n                </CForm>\r\n              </CContainer>\r\n            </CCard>\r\n          </div>\r\n          ):null}\r\n          {/**if there are no evms to create */}\r\n          {(uniqueArray.length == 0 && evmsList.length != 0)?( <div className=\"col-lg-10 offset-lg-1 col-md-12\">\r\n          <CAlert className=\"no-value-show-alert text-center\" color=\"primary\">All existing projects' EVMS has been created.\r\n                        <div><CButton className=\"evms-from-create\" variant=\"ghost\" onClick={() => history.push({ pathname: '/dashboard/EVMS/view' })}>View Details</CButton> of already existing EVMS's</div>\r\n                       </CAlert>\r\n          </div>\r\n          ):null}\r\n\r\n        </CRow>\r\n      </CContainer>\r\n    </>\r\n  );\r\n};\r\nexport default ProjectEVMS;\r\n"],"sourceRoot":""}