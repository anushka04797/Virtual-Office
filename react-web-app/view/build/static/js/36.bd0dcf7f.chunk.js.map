{"version":3,"sources":["pages/weekly-timecards/WeeklyTimecards.js"],"names":["WeeklyTimecards","profile_details","useSelector","state","profile","data","useState","tableData","setTabledata","newArray","pdfData","setPdfData","startDate","setStartDate","endDate","setEndDate","projectList","setProjectList","setUserData","totalHrs","setTotalHrs","project","useSnackbar","enqueueSnackbar","closeSnackbar","getWeeklyTimecard","API","get","sessionStorage","getItem","USER_ID","then","res","start_date","end_date","undefined","forEach","item","idx","push","sub_task","console","log","task_title","newItem","id","time_card_assignee","actual_work_done","time_type","submitted","hours_today","date_created","date_updated","length","temp_array","temp_totalHrs","index","element","parseFloat","weekday","moment","week","dates","work_package_number","toFixed","React","useEffect","window","scrollTo","useFormik","initialValues","wbs","time","hrs","validateOnBlur","validateOnChange","day","Date","i","getDay","toDate","sub","subtract","days","getDate","getMonth","getFullYear","d","add","timeType","value","label","updateTimeCardHrs","event","target","Time","put","status","variant","className","md","onClick","doc","jsPDF","setFontSize","first_name","last_name","format","content","startY","head","body","map","elt","Days","Task","Total","edate","name","text","autoTable","save","exportPDF","csvData","fileName","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","type","Blob","FileSaver","exportToCSV","phone","Set","items","fields","key","_style","width","_classes","primary","hover","striped","bordered","size","scopedSlots","onChange","updateTimeCard","ele","selected","Sunday","onBlur","defaultValue","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"mappings":"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","file":"static/js/36.bd0dcf7f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport \"../timecards/timeCards.css\";\r\nimport { useFormik } from \"formik\";\r\nimport { BASE_URL, USER_ID } from '../../Config';\r\nimport { API } from '../../Config';\r\nimport Select from \"react-select\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport * as FileSaver from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\nimport CIcon from '@coreui/icons-react';\r\nimport moment from \"moment\";\r\nimport { CDataTable, CCardBody, CCard, CForm, CButton, CInput, CBadge, CModal, CModalHeader, CModalTitle, CModalBody, CContainer, CRow, CCol, CLabel, CTextarea } from '@coreui/react';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport { useSnackbar } from \"notistack\";\r\n\r\nconst WeeklyTimecards = () => {\r\n    const profile_details = useSelector(state => state.profile.data)\r\n    const [tableData, setTabledata] = useState([]);\r\n    let newArray = [];\r\n    const [pdfData, setPdfData] = useState([])\r\n    const [pdfTitle, setPdfTitle] = useState();\r\n    const [startDate, setStartDate] = useState();\r\n    const [endDate, setEndDate] = useState();\r\n    const [projectList, setProjectList] = useState([]);\r\n    const [userData, setUserData] = useState([])\r\n    const [totalHrs, setTotalHrs] = useState(0);\r\n    const [editModal, setEditModal] = useState(false);\r\n    var project = []\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n    React.useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n        getWeeklyTimecard();\r\n    }, [])\r\n\r\n    function getWeeklyTimecard(){\r\n        API.get('wbs/user-wise/weekly-time-card/' + sessionStorage.getItem(USER_ID) + '/').then((res) => {\r\n            setStartDate(res.data.start_date);\r\n            setEndDate(res.data.end_date);\r\n\r\n            if (res.data.data != undefined) {\r\n                res.data.data.forEach((item, idx) => {\r\n                    project.push(item.project.sub_task)\r\n                    console.log(\"subtask\",item.project.task_title)\r\n                    var newItem = {\r\n                        id: item.id,\r\n                        project: item.project,\r\n                        time_card_assignee: item.time_card_assignee,\r\n                        actual_work_done: item.actual_work_done,\r\n                        time_type: item.time_type,\r\n                        submitted: item.submitted,\r\n                        hours_today: item.hours_today,\r\n                        date_created: item.date_created,\r\n                        date_updated: item.date_updated, \r\n                        task_title: item.project.task_title\r\n                    };\r\n                    newArray.push(newItem);\r\n                });\r\n            }\r\n            console.log(project)\r\n            console.log('new array', newArray)\r\n            setPdfData(newArray);\r\n            {/**let's populate the damn table,shall we?**/ }\r\n            if (newArray.length != 0 || newArray != undefined) {\r\n                let temp_array = []\r\n                var temp_totalHrs = 0;\r\n                for (let index = 0; index < newArray.length; index++) {\r\n                    const element = newArray[index];\r\n                    temp_totalHrs += parseFloat(element.hours_today);\r\n                    console.log(\"ddddddddd\",element)\r\n                    var weekday = moment(element.date_updated).weekday();\r\n                    const days = ['Sunday', 'Monday', 'Thursday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\r\n                    const week = dates()\r\n\r\n                    {/**final push to gtable */ }\r\n                    temp_array.push({\r\n                        'Date':week[index],\r\n                        'Days': days[index],\r\n                        'Task':element.task_title,\r\n                        'WP': element.project.work_package_number ,\r\n                        'id': element.id,\r\n                        'WBS': element.actual_work_done,\r\n                        'Time': element.time_type,\r\n                        'Sunday': weekday == 0 ? element.hours_today : '',\r\n                        'Monday': weekday == 1 ? element.hours_today : '',\r\n                        'Tuesday': weekday == 2 ? element.hours_today : '',\r\n                        'Wednesday': weekday == 3 ? element.hours_today : '',\r\n                        'Thursday': weekday == 4 ? element.hours_today : '',\r\n                        'Friday': weekday == 5 ? element.hours_today : '',\r\n                        'Saturday': weekday == 6 ? element.hours_today : '',\r\n                        'Total': element.hours_today\r\n                    })\r\n                    console.log(moment(element.date_updated).weekday())\r\n                }\r\n                temp_array.push({\r\n                    'Date':'',\r\n                    'Days':'',\r\n                    'Task':'', \r\n                    'WP': '',\r\n                    'id': '',\r\n                    'WBS': '',\r\n                    'Time': '',\r\n                    'Sunday': '',\r\n                    'Monday': '',\r\n                    'Tuesday': '',\r\n                    'Wednesday': '',\r\n                    'Thursday': '',\r\n                    'Friday': '',\r\n                    'Saturday': '',\r\n                    'Total': 'Total = ' + temp_totalHrs.toFixed(1)\r\n                })\r\n                setTabledata(temp_array)\r\n                setUserData(temp_array)\r\n                setTotalHrs(temp_totalHrs.toFixed(1))\r\n                console.log(\"table\", temp_array)\r\n                console.log(\"tabledata from weekly timecard\", totalHrs)\r\n            }\r\n        })\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        setProjectList(project);\r\n    }, []);\r\n\r\n    {/*initialize form */ }\r\n    const editForm = useFormik({\r\n        initialValues: {\r\n            wbs: \"\",\r\n            time: \"\",\r\n            hrs: \"\",\r\n\r\n        },\r\n        validateOnBlur: true,\r\n        validateOnChange: true,\r\n        // onSubmit: getTimeCards\r\n    })\r\n\r\n    {/**export fetched tabledata to excel */ }\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const fileExtension = '.xlsx';\r\n    const exportToCSV = (csvData, fileName) => {\r\n        console.log(csvData)\r\n        var temp_data = []\r\n        const ws = XLSX.utils.json_to_sheet(csvData);\r\n        const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    }\r\n   \r\n    const dates =()=>{\r\n        var day = new Date ();\r\n        for(let i =0;i<7;i++){\r\n            if(day.getDay()===0){\r\n                day = moment(day).toDate();\r\n            }\r\n            else{\r\n                const sub = day.getDay()\r\n                day = moment(day).subtract(sub, \"day\").toDate();\r\n            }\r\n             \r\n           \r\n        }\r\n        const days=[]\r\n        days[0]=day.getDate()+'/'+day.getMonth()+'/'+day.getFullYear()\r\n\r\n        for(let i=1;i<7;i++){\r\n\r\n              var d = moment(day).add(i, \"day\").toDate();\r\n              console.log(\"dd\", d)\r\n              days.push( d.getDate()+'/'+d.getMonth()+'/'+d.getFullYear())\r\n        }\r\n        day = day.getDate()+'/'+day.getMonth()+'/'+day.getFullYear()\r\n        console.log(\"week\", days);\r\n        return days;\r\n    }\r\n\r\n    React.useEffect(() => {console.log(\"weeeeeeeek\", dates())},[]);\r\n\r\n\r\n    /**export fetched data to pdf */\r\n    const exportPDF = () => {\r\n        const unit = \"pt\";\r\n        const size = \"A4\"; // Use A1, A2, A3 or A4\r\n        const orientation = \"portrait\"; // portrait or landscape\r\n        const marginLeft = 40;\r\n        const doc = new jsPDF(orientation, unit, size);\r\n        doc.setFontSize(12);\r\n      //  doc.rect(130, 30, 600, 40);\r\n        \r\n        const title = profile_details.first_name + \"_\" + profile_details.last_name + \"_\" + \"Timecard_\" + moment(startDate).format(\"DD/MM/YYYY\") + \"-\" + moment(endDate).format(\"DD/MM/YYYY\");\r\n        const headers = [[\r\n           \r\n            \"Date\",\r\n            \"Days\",\r\n            \"Task Title\",\r\n            \"Hours\", \r\n            \"Hours Type\"\r\n           \r\n        ]];\r\n        console.log(\"pdfData\", pdfData)\r\n        //console.log(\"table1111111\", tableData.Task)\r\n        const uData = tableData.map((elt, idx) => [\r\n           \r\n            elt.Date,\r\n            elt.Days,\r\n            elt.Task,\r\n            elt.Total,\r\n            elt.Time,\r\n        ])\r\n        let content = {\r\n            startY: 120,\r\n            head: headers,\r\n            body: uData\r\n        };\r\n        const edate= moment(endDate).format(\"DD/MM/YYYY\")\r\n        const name =profile_details.first_name + \" \" + profile_details.last_name \r\n        doc.text(150, 50, \"Datasoft Manufacturing & Assembly Gulshan Branch\")\r\n        doc.text(42,80, \"Emplyee Time card\")\r\n        doc.text(420, 80, \"Week-Ending: \"+ edate)\r\n        doc.text(42, 100, \"Name: \"+ name)\r\n        doc.text(420, 100, \"NID: \")   \r\n        doc.text(42, 330, \"Submitted : (date & Time)\")\r\n        doc.autoTable(content);\r\n        doc.save(profile_details.first_name + \"_\" + profile_details.last_name + \"_\" + \"Timecard_\" + moment(startDate).format(\"DD/MM/YYYY\") + \"-\" + moment(endDate).format(\"DD/MM/YYYY\") + \".pdf\")\r\n    }\r\n\r\n    const timeType = [\r\n        { value: \"RHR\", label: \"RHR\" },\r\n        { value: \"OTO\", label: \"OTO\" }\r\n    ]\r\n\r\n    function updateTimeCard(event, item) {\r\n        console.log(event.target.value, item)\r\n        var data = {\r\n            \"time_type\": event.target.value,\r\n            \"hours_today\": item.Total,\r\n            \"date_updated\": \"\"\r\n        }\r\n        API.put('wbs/time-card/update/' + item.id + '/', data).then((res) => {\r\n            console.log(res)\r\n            if(res.status === 200){\r\n                getWeeklyTimecard();\r\n                enqueueSnackbar('Time type update succefull.', { variant: 'info' })\r\n            }\r\n        })\r\n    }\r\n\r\n    function updateTimeCardHrs(event, item) {\r\n        console.log(event.target.value, item)\r\n        var data = {\r\n            \"time_type\": item.Time,\r\n            \"hours_today\": event.target.value,\r\n            \"date_updated\": \"\"\r\n        }\r\n        API.put('wbs/time-card/update/' + item.id + '/', data).then((res) => {\r\n            console.log(res)\r\n            if(res.status === 200){\r\n                getWeeklyTimecard();\r\n                enqueueSnackbar('Actual hours update succefull.', { variant: 'info' })\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CContainer>\r\n                <h3 className=\"timecards-page-header mb-3\">Weekly Timecard</h3>\r\n                <CRow>\r\n                    {/**Export buttons */}\r\n                    {tableData.length != 0 && <CCol md=\"12\">\r\n                        <h5 className=\"tiny-header--5 mt-0\">Export</h5>\r\n                        <div className=\"format-buttons mt-3 mb-3\">\r\n                            <CButton className=\"file-format-download\" onClick={() => exportPDF()}><CIcon name=\"cil-description\" className=\"mr-2\" />PDF</CButton>\r\n                            <CButton className=\"file-format-download\" onClick={() => exportToCSV(tableData, profile_details.first_name + \"_\" + profile_details.last_name + \"_\" + \"Timecard_\" + moment(startDate).format(\"DD/MM/YYYY\") + \"-\" + moment(endDate).format(\"DD/MM/YYYY\"))} ><CIcon name=\"cil-spreadsheet\" className=\"mr-2\" />Excel</CButton>\r\n                            {/* <CButton className=\"file-format-download\">Print</CButton> */}\r\n                        </div>\r\n                    </CCol>\r\n                    }\r\n                    {/**view timecard data */}\r\n                    <CCol md=\"4\">\r\n                        Name: {profile_details.first_name + \" \" + profile_details.last_name}<br />\r\n                        Phone: +{profile_details.phone}\r\n                    </CCol>\r\n                    <CCol md=\"4\">\r\n                        Week: {moment(startDate).format(\"DD/MM/YYYY\")} - {moment(endDate).format(\"DD/MM/YYYY\")} <br />\r\n                        Month: {moment(endDate).format('MMMM')} <br />\r\n                        Year: {moment(endDate).format('YYYY')}\r\n                    </CCol>\r\n                    <CCol md=\"4\">\r\n                        Project Name(s): {[...new Set(projectList)].map((item, idx) => (\r\n                            <span>{item}{idx < projectList.length - 1 && <span>, </span>}</span>\r\n                        ))}\r\n                    </CCol>\r\n                    {<CCol md=\"12\">\r\n                        <div className=\"mt-4 mb-2\">\r\n                            <CDataTable items={tableData} fields={[\r\n                                {\r\n                                    key: \"WP\",\r\n                                    _style: { width: \"auto\" },\r\n                                    _classes: \"font-weight-bold\",\r\n                                },\r\n                                'WBS',\r\n                                {\r\n                                    key: 'Time',\r\n                                    _style: { width: '100px' }\r\n                                },\r\n                                {\r\n                                    key: 'Sunday',\r\n                                    _style: { width: '70px' }\r\n                                },\r\n                                {\r\n                                    key: 'Monday',\r\n                                    _style: { width: '70px' }\r\n                                },\r\n                                {\r\n                                    key: 'Tuesday',\r\n                                    _style: { width: '70px' }\r\n                                },\r\n                                {\r\n                                    key: 'Wednesday',\r\n                                    _style: { width: '70px' }\r\n                                },\r\n                                {\r\n                                    key: 'Thursday',\r\n                                    _style: { width: '70px' }\r\n                                },\r\n                                {\r\n                                    key: 'Friday',\r\n                                    _style: { width: '70px' }\r\n                                },\r\n                                {\r\n                                    key: 'Saturday',\r\n                                    _style: { width: '70px' }\r\n                                },\r\n                                {\r\n                                    key: 'Total',\r\n                                    _style: { width: 'auto' }\r\n                                },\r\n                            ]}\r\n                                primary\r\n                                hover\r\n                                striped\r\n                                bordered\r\n                                size=\"sm\"\r\n                                scopedSlots={{\r\n                                    'Time':\r\n                                        (item, index) => {\r\n                                            return (\r\n                                                <td className=\"py-2\">\r\n                                                    {item.Time != \"\" && <select onChange={(event) => { updateTimeCard(event, item) }}>\r\n                                                        {timeType.map(ele => (\r\n                                                            <option selected={ele.value == item.Time}>{ele.value}</option>\r\n                                                        ))\r\n                                                        }\r\n                                                    </select>}\r\n                                                </td>\r\n                                            )\r\n                                        },\r\n                                    'Sunday':\r\n                                        (item, index) => {\r\n                                            return (\r\n                                                <td className=\"py-2\">\r\n                                                    {item.Sunday != \"\" && <CInput name=\"Sunday\" type=\"number\" onBlur={(event) => { updateTimeCardHrs(event, item) }} defaultValue={item.Sunday} className=\"custom-forminput-6\" />}\r\n                                                </td>\r\n                                            )\r\n                                        },\r\n                                    'Monday':\r\n                                        (item, index) => {\r\n                                            return (\r\n                                                <td className=\"py-2\">\r\n                                                    {item.Monday != \"\" && <CInput name=\"Monday\" type=\"number\" onBlur={(event) => { updateTimeCardHrs(event, item) }} defaultValue={item.Monday} className=\"custom-forminput-6\" />}\r\n                                                </td>\r\n                                            )\r\n                                        },\r\n                                    'Tuesday':\r\n                                        (item, index) => {\r\n                                            return (\r\n                                                <td className=\"py-2\">\r\n                                                    {item.Tuesday != \"\" && <CInput name=\"Tuesday\" type=\"number\" onBlur={(event) => { updateTimeCardHrs(event, item) }} defaultValue={item.Tuesday} className=\"custom-forminput-6\" />}\r\n                                                </td>\r\n                                            )\r\n                                        },\r\n                                    'Wednesday':\r\n                                        (item, index) => {\r\n                                            return (\r\n                                                <td className=\"py-2\">\r\n                                                    {item.Wednesday != \"\" && <CInput name=\"Wednesday\" type=\"number\" onBlur={(event) => { updateTimeCardHrs(event, item) }} defaultValue={item.Wednesday} className=\"custom-forminput-6\" />}\r\n                                                </td>\r\n                                            )\r\n                                        },\r\n                                    'Thursday':\r\n                                        (item, index) => {\r\n                                            return (\r\n                                                <td className=\"py-2\">\r\n                                                    {item.Thursday != \"\" && <CInput name=\"Thursday\" type=\"number\" onBlur={(event) => { updateTimeCardHrs(event, item) }} defaultValue={item.Thursday} className=\"custom-forminput-6\" />}\r\n                                                </td>\r\n                                            )\r\n                                        },\r\n                                    'Friday':\r\n                                        (item, index) => {\r\n                                            return (\r\n                                                <td className=\"py-2\">\r\n                                                    {item.Friday != \"\" && <CInput name=\"Friday\" type=\"number\" onBlur={(event) => { updateTimeCardHrs(event, item) }} defaultValue={item.Friday} className=\"custom-forminput-6\" />}\r\n                                                </td>\r\n                                            )\r\n                                        },\r\n                                    'Saturday':\r\n                                        (item, index) => {\r\n                                            return (\r\n                                                <td className=\"py-2\">\r\n                                                    {item.Saturday != \"\" && <CInput name=\"Saturday\" type=\"number\" onBlur={(event) => { updateTimeCardHrs(event, item) }} defaultValue={item.Saturday} className=\"custom-forminput-6\" />}\r\n                                                </td>\r\n                                            )\r\n                                        },\r\n                                }}\r\n                            >\r\n                            </CDataTable>\r\n                        </div>\r\n                    </CCol>}\r\n                </CRow>\r\n            </CContainer>\r\n        </>\r\n    )\r\n}\r\nexport default WeeklyTimecards;"],"sourceRoot":""}