{"version":3,"sources":["components/scheduledMeetings/scheduledMeets.js","components/evms/evmsTable.js","components/projects-table/projectsTable.js","components/assignedProjects/assignedProjects.js","pages/dashboard/Dashboard.js","components/wbs-docs-upload/WBSFileUpload.js","pages/wbs-board/wbs-modal.js"],"names":["ScheduleMeetings","history","useHistory","dispatch","useDispatch","meeting","useSelector","state","meetings","data","React","useEffect","fetchMeetingList","sessionStorage","getItem","USER_ID","className","length","undefined","slice","map","item","idx","room_id","id","agenda","medium","start_time","color","onClick","push","pathname","EvmsView","evmsList","calculateCPI","ev","ac","Math","abs","console","log","Array","from","project","task_delivery_order","title","sub_task","earned_value","actual_cost","planned_value","ProjectsTableDashboard","projects","work_package_number","Number","parseFloat","planned_hours","toFixed","remaining_hours","planned_delivery_date","AssignedProjectsDashboard","wbs","temp_data","forEach","element","assignee","useState","updatedData","setUpdatedData","modal","setModal","modalData","setModalData","fetchWbsThunk","value","API","get","then","res","find","description","end_date","show","onClose","toggle","timeCardList","Dashboard","location","useLocation","useSnackbar","enqueueSnackbar","closeSnackbar","window","scrollTo","variant","message","has_permission","memo","WBSFileUpload","props","files","setFiles","fileAvatars","setFileAvatars","temp","label","htmlFor","type","onChange","event","selectedFile","target","URL","createObjectURL","accept","src","alt","file","index","arrayRemoveItem","name","WbsModal","hrsWorked","setHrsWorked","plannedHours","setPlannedHours","actualHour","setactualHour","remaininghrs","setremaininghrs","datecheck","setdatecheck","work_package_index","ep","i","estimated_person","start","start_date","end","moment","require","total_days","diff","total_hrs","tomorrow","Date","count","setDate","getDate","getDay","total_spent","hours_today","lastDate","currentDate","difference","getFullYear","getMonth","split","formWbsUpdate","useFormik","initialValues","details","status","hours_worked","progress","comments","deliverable","date_updated","actual_work_done","validateOnChange","validateOnBlur","validate","values","errors","onSubmit","setSubmitting","put","success","fetchProjectsForPMThunk","fetchProjectsThunk","swal","text","icon","catch","err","closeOnBackdrop","size","closeButton","task_title","handleChange","style","fontSize","maxlength","disabled","e","setFieldValue","min","maxLength","isSubmitting","isValidating","handleSubmit","md","first_name","last_name","reporter"],"mappings":"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","file":"static/js/32.de7fbbe0.chunk.js","sourcesContent":["import React from 'react'\r\nimport { CButton, CCard, CCardBody, CAlert, CRow, CCol } from '@coreui/react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchMeetingList } from \"../../store/slices/MeetingSlice\";\r\nimport { USER_ID } from \"../../Config\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ScheduleMeetings = () => {\r\n    let history = useHistory();\r\n    const dispatch = useDispatch()\r\n    const meeting = useSelector(state => state.meetings.data);\r\n    React.useEffect(() => {\r\n        dispatch(fetchMeetingList(sessionStorage.getItem(USER_ID)))\r\n    }, [])\r\n    return (\r\n        <>\r\n            <div className=\"main-holder-projects\">\r\n                <h3 className=\"projectsHeader\">\r\n                    Scheduled Meetings({meeting.length})\r\n                </h3>\r\n\r\n                <div className=\"card-holder1 \">\r\n                    {meeting != undefined && meeting.slice(0, 3).map((item, idx) => (\r\n                        <CCard className=\"project-card2\" key={idx}>\r\n                            <CCardBody>\r\n                                {item.room_id != \"\" &&\r\n                                <h6 className=\"id-no1\">room id: #{item.room_id}</h6>}\r\n                                {item.room_id == \"\" && <h6 className=\"id-no1\">meeting id: #{item.id}</h6>}\r\n                                <h5 className=\"card-details1\"><span className=\"p-header-3\">Agenda:</span> {item.agenda}</h5>\r\n                                <h5 className=\"card-details1\"><span className=\"p-header-3\">Location:</span> {item.medium == 0 ? 'Physical' :'Virtual'}</h5>\r\n                                <h5 className=\"card-details1\"><span className=\"p-header-3\">Scheduled Date &amp; Time :</span> {item.start_time}</h5>\r\n                            </CCardBody>\r\n\r\n                        </CCard>\r\n                    ))}\r\n                    { /**If no meetings */}\r\n                    {meeting == undefined || meeting == '' ? (\r\n                        <CAlert className=\"no-value-show-alert\" color=\"primary\">Currently there are no upcoming meetings</CAlert>\r\n                    ) : <></>}\r\n                </div>\r\n                {meeting != undefined  && <CRow className=\"button-holder3\">\r\n                <CCol className=\"p-header-3 col-md-9 mt-2\">\r\n                       \r\n                    </CCol>\r\n\r\n                    <CCol className=\"col-md-3\">\r\n                    <CButton className=\"tiny-buttons1\"  onClick={() => history.push({pathname:'/dashboard/meetings'})}>View all</CButton>\r\n                    </CCol>\r\n                    </CRow>}\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\nexport default ScheduleMeetings\r\n","import React, { useState } from 'react';\r\nimport './evmsTable.css';\r\nimport { CButton, CCard, CCardBody, CAlert, CRow, CCol } from '@coreui/react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { fetchEvmsThunk } from '../../store/slices/EvmsSlice';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n\r\nconst EvmsView = () => {\r\n    let history = useHistory();\r\n    \r\n    var cpiVal\r\n    const evmsList = useSelector(state => state.evmsList.data)\r\n    console.log('evms from dashboard', evmsList)\r\n    function calculateCPI(ev,ac){\r\n      let val = Math.abs(ev/ac)\r\n\r\n      return val;\r\n\r\n}\r\n\r\n\r\n  \r\n   \r\n    return (\r\n        <>\r\n            <div className=\"main-holder-projects\">\r\n                <h3 className=\"projectsHeader\">\r\n                    EVMS Summary ({evmsList.length})\r\n                </h3>\r\n                <div className=\"card-holder1\">\r\n                    {evmsList != undefined && Array.from(evmsList).slice(0, 3).map((item, idx) => (\r\n                        <CCard className=\"project-card1\" key={idx}>\r\n                            <CCardBody>\r\n                                <h6 className=\"id-no1\">{item.project.task_delivery_order.title} / {item.project.sub_task}</h6>\r\n                                <h5 className=\"card-details2\"><span className=\"p-header-4\">Cost Performance Index (CPI) :</span><span> {calculateCPI(item.earned_value,item.actual_cost)}</span><small className=\"ml-1 star-color\">*(CPI{'>'}1, within budget.CPI {'<'}1, over budget)</small></h5>\r\n                                <h5 className=\"card-details2\"><span className=\"p-header-4\">Schedule Performance Index (SPI) :</span><span> {calculateCPI(item.earned_value,item.project.planned_value)}</span><small className=\"ml-1 star-color\">*(SPI {'>'}1, within schedule,SPI {'<'}1, behind schedule)</small></h5>\r\n                            </CCardBody>\r\n                        </CCard>\r\n                    ))}\r\n                    { /**If no evmsList */}\r\n                    {evmsList == undefined || evmsList == 0 ? (\r\n\r\n\r\n\r\n                        <CAlert className=\"no-value-show-alert\" color=\"primary\">Currently there are no projects assigned to you</CAlert>\r\n\r\n\r\n                    ) : null\r\n\r\n\r\n                    }\r\n\r\n                </div>\r\n                {evmsList != undefined &&\r\n                    <CRow className=\"button-holder3\">\r\n                         <CCol className=\"p-header-3 col-md-9 mt-2\">\r\n                       \r\n                    </CCol>\r\n\r\n                    <CCol className=\"col-md-3\"><CButton className=\"tiny-buttons1\" onClick={() => history.push({ pathname: '/dashboard/EVMS/view' })}>View all</CButton>\r\n                    </CCol>\r\n                    </CRow>}\r\n\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default EvmsView;","import React, { useEffect } from 'react';\r\nimport './projectsTable.css';\r\nimport { CButton, CCard, CCardBody, CAlert, CRow, CCol } from '@coreui/react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// import { fetchProjectsThunk } from \"../../store/slices/ProjectsSlice\";\r\n// import { USER_ID } from \"../../Config\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst ProjectsTableDashboard = () => {\r\n    let history = useHistory();\r\n    const dispatch = useDispatch()\r\n    const projects = useSelector(state => state.projects.data);\r\n    useEffect(() => {\r\n        console.log(\"ProjectsList\", projects)\r\n    }, [projects])\r\n    return (\r\n        <>\r\n            <div className=\"main-holder-projects\">\r\n                <h3 className=\"projectsHeader\">\r\n                    Assigned Project({projects.length})\r\n                </h3>\r\n\r\n                <div className=\"card-holder1\">\r\n                    {projects != undefined && Array.from(projects).slice(0, 3).map((item, idx) => (\r\n                        <CCard className=\"project-card1\" key={idx} onClick={() => history.push({ pathname: 'dashboard/Projects/assigned-projects/details/' + item.project.work_package_number + '/' })}>\r\n                            <CCardBody>\r\n                                {/* <h6 className=\"id-no1\">Work Package Number: # {item.project.work_package_number}</h6> */}\r\n                                <h5 className=\"card-details1\"><span className=\"p-header-3\">Project Name: </span> {item.project.sub_task}</h5>\r\n                                <h5 className=\"card-details1\"><span className=\"p-header-3\">Planned Hours: </span> {Number(parseFloat(item.project.planned_hours)).toFixed(2)}</h5>\r\n                                <h5 className=\"card-details1\"><span className=\"p-header-3\">Remaining Hours: </span> {Number(parseFloat(item.project.remaining_hours)).toFixed(2)}</h5>\r\n                                <h5 className=\"card-details1\"><span className=\"p-header-3\">Planned Delivery Date : </span>{item.project.planned_delivery_date}</h5>\r\n                            </CCardBody>\r\n                        </CCard>\r\n                    ))}\r\n                    { /**If no projects */}\r\n                    {projects == '' || projects == undefined ? (\r\n                        <CAlert className=\"no-value-show-alert\" color=\"primary\">Currently there are no projects assigned to you</CAlert>\r\n                    ) : null\r\n                    }\r\n                </div>\r\n                {projects != undefined && <CRow className=\"button-holder3\">\r\n                    <CCol className=\"p-header-3 col-md-9 mt-2\">\r\n                       \r\n                    </CCol>\r\n\r\n                    <CCol className=\"col-md-3\">\r\n                    <CButton className=\"tiny-buttons1\" onClick={() => history.push({ pathname: '/dashboard/Projects/assigned-projects' })}>View all</CButton>\r\n                    </CCol>\r\n                    </CRow>}\r\n\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default ProjectsTableDashboard;\r\n","import React, { useState } from \"react\";\r\nimport { CButton, CCard, CCardBody, CAlert, CRow, CCol } from \"@coreui/react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { fetchWbsThunk } from \"../../store/slices/WbsSlice\";\r\nimport WbsModal from \"../../pages/wbs-board/wbs-modal\";\r\n// import { fetchUserWiseWbsThunk } from '../../store/slices/WbsSlice';\r\nimport { API, USER_ID } from \"../../Config\";\r\n\r\nconst AssignedProjectsDashboard = () => {\r\n  let history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const wbs = useSelector((state) => {\r\n    // state.wbs.data\r\n    var temp_data = [];\r\n    state.wbs.data.forEach((element) => {\r\n      if (element.assignee.id == sessionStorage.getItem(USER_ID)) {\r\n        temp_data.push(element);\r\n        // console.log(element)\r\n      }\r\n    });\r\n    return temp_data;\r\n  });\r\n  console.log(wbs);\r\n  const [updatedData, setUpdatedData] = useState([]);\r\n  const [modal, setModal] = useState(false);\r\n  const [modalData, setModalData] = useState(null);\r\n  const editWbsModal = (value) => {\r\n    API.get(\"wbs/time-card/list/\" + value + \"/\").then((res) => {\r\n      console.log(\"time-card list result\", res);\r\n      setUpdatedData(res.data);\r\n    });\r\n    setModalData(wbs.find((element) => element.id == value));\r\n    setModal(true);\r\n  };\r\n  const toggle = () => {\r\n    setModalData(null);\r\n    setModal(!modal);\r\n  };\r\n\r\n  const onWbsUpdate = () => {\r\n    setModal(false);\r\n    dispatch(fetchWbsThunk(sessionStorage.getItem(USER_ID)));\r\n    setModalData(null);\r\n  };\r\n\r\n  React.useEffect(() => { dispatch(fetchWbsThunk(sessionStorage.getItem(USER_ID)));}, []);\r\n  return (\r\n    <>\r\n      <div className=\"main-holder-projects\">\r\n        <h3 className=\"projectsHeader\">WBS Board({wbs.length})</h3>\r\n\r\n        <div className=\"card-holder1\">\r\n          {wbs != undefined &&\r\n            wbs.slice(0, 3).map((item, idx) => (\r\n              // item.assignee.id == sessionStorage.getItem(USER_ID) &&\r\n              <CCard\r\n                className=\"project-card1\"\r\n                key={idx}\r\n                onClick={() => editWbsModal(item.id)}\r\n              >\r\n                <CCardBody>\r\n                  <h5 className=\"card-details1\">\r\n                    <span className=\"p-header-3\">Project: </span>{\" \"}\r\n                    {item.project.sub_task}\r\n                  </h5>\r\n                  <h6 className=\"card-details1\">\r\n                    <span className=\"p-header-3\">WBS Title:</span> {item.title}\r\n                  </h6>\r\n                  <h6 className=\"card-details1\">\r\n                    <span className=\"p-header-3\">WBS Description:</span>{\" \"}\r\n                    {item.description}\r\n                  </h6>\r\n                  <h6 className=\"card-details1\">\r\n                    <span className=\"p-header-3\">End Date :</span>{\" \"}\r\n                    {item.end_date}\r\n                  </h6>\r\n                </CCardBody>\r\n              </CCard>\r\n            ))}\r\n          {/**If no wbs */}\r\n          {wbs == undefined || wbs == 0 ? (\r\n            <CAlert className=\"no-value-show-alert\" color=\"primary\">\r\n              Currently there are no WBS assigned to you\r\n            </CAlert>\r\n          ) : null}\r\n        </div>\r\n        {wbs != undefined && (\r\n          <CRow className=\"button-holder3\">\r\n            <CCol className=\"p-header-3 col-md-9 mt-2\">\r\n             \r\n            </CCol>\r\n\r\n            <CCol className=\"col-md-3\">\r\n              <CButton\r\n                className=\"tiny-buttons1\"\r\n                onClick={() =>\r\n                  history.push({ pathname: \"/dashboard/WBS/board\" })\r\n                }\r\n              >\r\n                View all\r\n              </CButton>\r\n            </CCol>\r\n          </CRow>\r\n        )}\r\n      </div>\r\n      {modalData != null && (\r\n        <WbsModal\r\n          show={modal}\r\n          onClose={onWbsUpdate}\r\n          toggle={toggle}\r\n          data={modalData}\r\n          timeCardList={updatedData}\r\n        ></WbsModal>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default AssignedProjectsDashboard;\r\n","import React, { Suspense } from \"react\";\r\nimport { CCol, CContainer, CFade, CRow, CAlert, CButton } from \"@coreui/react\";\r\nimport innerRoutes from \"../../routes/DashboardRoutes\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./dashboard.css\";\r\nimport ScheduledMeetings from \"../../components/scheduledMeetings/scheduledMeets\";\r\nimport EvmsShow from \"../../components/evms/evmsTable\";\r\nimport ProjectTables from \"../../components/projects-table/projectsTable\";\r\nimport AssignedToMe from \"../../components/assignedProjects/assignedProjects\";\r\nimport { useLocation } from \"react-router\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { has_permission } from \"../../helper\";\r\nconst loading = (\r\n  <div className=\"pt-3 text-center\">\r\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\r\n  </div>\r\n);\r\n\r\nconst Dashboard = () => {\r\n let history = useHistory();\r\n  let location = useLocation();\r\n  const dispatch = useDispatch();\r\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n  React.useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    console.log(\"dashboard mounted\", location.state);\r\n    if (location.state?.from == \"login\") {\r\n      enqueueSnackbar(\"Welcome \", { variant: \"success\" });\r\n    }\r\n    if (location.state?.message) {\r\n      console.log(\"message\", location.state.message);\r\n      enqueueSnackbar(location.state.message, { variant: \"warning\" });\r\n    }\r\n    //console.log(new Date(JSON.parse(sessionStorage.getItem('TOKEN')).time).toISOString())\r\n  }, []);\r\n  return (\r\n    <>\r\n      <CContainer>\r\n        {/**Row for showing da tables */}\r\n        <CRow>\r\n        {has_permission('projects.add_projects') &&\r\n          <CAlert className=\"no-value-show-alert text-center\" color=\"primary\">\r\n            Click here to create a New Project\r\n            <div>\r\n              <CButton\r\n                className=\"evms-from-details\"\r\n                onClick={() =>\r\n                  history.push({ pathname: \"/dashboard/Projects/create-new-project\" })\r\n                }\r\n              >\r\n                Create Project\r\n              </CButton>\r\n            </div>\r\n          </CAlert>}\r\n          <div className=\"col-lg-5 offset-lg-1\">\r\n            <ProjectTables />\r\n          </div>\r\n          <div className=\"col-lg-5\">\r\n            <AssignedToMe />\r\n          </div>\r\n          <div className=\"col-lg-5 offset-lg-1\">\r\n            <ScheduledMeetings />\r\n          </div>\r\n          {has_permission(\"evms.view_evms\") && (\r\n            <div className=\"col-lg-5 \">\r\n              <EvmsShow />\r\n            </div>\r\n          )}\r\n        </CRow>\r\n      </CContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(Dashboard);\r\n","import React, { useState } from \"react\";\r\nimport {\r\n    CForm,\r\n    CLabel,\r\n    CInput,\r\n    CCardBody,\r\n    CCard,\r\n    CButton,\r\n    CContainer,\r\n} from \"@coreui/react\";\r\nimport \"./uploadForm.css\";\r\nimport Select from \"react-select\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { API, USER_ID } from \"../../Config\";\r\nimport { arrayRemoveItem } from \"../../helper\";\r\nimport swal from \"sweetalert\";\r\nimport { process_params } from \"express/lib/router\";\r\n\r\nconst WBSFileUpload = (props) => {\r\n    const colourStyles = {\r\n        // control: (styles, state) => ({ ...styles,height:\"35px\", fontSize: '14px !important', lineHeight: '1.42857', borderRadius: \"8px\",borderRadius:\".25rem\",color:\"rgb(133,133,133)\",border:state.isFocused ? '2px solid #0065ff' :'inherit'}),\r\n        option: (provided, state) => ({ ...provided, fontSize: \"14px !important\" }),\r\n    };\r\n    \r\n    const [files, setFiles] = useState(props.files)\r\n    const [fileAvatars, setFileAvatars] = useState([])\r\n    const upload = () => {\r\n        let formData = new FormData()\r\n        // formData.append('project', selectedProject.data.project.id)\r\n        formData.append('files', files.length)\r\n        formData.append('upload_by', sessionStorage.getItem(USER_ID))\r\n        Array.from(files).forEach((file, idx) => {\r\n            formData.append('file' + (idx + 1), file)\r\n        })\r\n        // API.post('project/shared/document/create/', formData).then((res) => {\r\n        //     setSelectedProject(null)\r\n        //     setFileAvatars([])\r\n        //     setFiles([])\r\n        //     swal('Uploaded', 'Files are uploaded', 'success')\r\n        // })\r\n    }\r\n    const projects = useSelector(state => {\r\n        let temp = []\r\n        Array.from(state.projects.data).forEach((project, idx) => {\r\n            temp.push({ value: project.project.id, label: project.project.task_delivery_order.title + ' / ' + project.project.sub_task, data: project })\r\n        })\r\n        return temp\r\n    })\r\n    function onImageChange(selectedFile) {\r\n        setFiles([...files, selectedFile]);\r\n        setFileAvatars([...fileAvatars, URL.createObjectURL(selectedFile)]);\r\n        props.setFiles([...files, selectedFile])\r\n    }\r\n    const handleProjectChange = (value, actionMeta) => {\r\n        if (actionMeta.action == 'select-option' || actionMeta.action == 'remove-value') {\r\n            // setSelectedProject(value)\r\n        }\r\n        else if (actionMeta.action == 'clear') {\r\n            // setSelectedProject(null)\r\n        }\r\n    };\r\n    function remove_file(index) {\r\n        console.log(fileAvatars)\r\n        setFileAvatars(arrayRemoveItem(fileAvatars, fileAvatars[index]))\r\n        setFiles(arrayRemoveItem(files, files[index]))\r\n    }\r\n    return (\r\n        <>\r\n            <CCard className=\"mt-4 upload-docs\">\r\n                <CCardBody>\r\n                    <CContainer>\r\n                        {/**Project Name */}\r\n                        \r\n                        {/**upload files box */}\r\n                        <div className=\"mb-3\">\r\n                            <CLabel htmlFor=\"attachments\" className=\"custom-label-5\">\r\n                                Upload Documents\r\n                            </CLabel>\r\n                            <CLabel className=\"custom-file-upload\">\r\n                                <CInput\r\n                                    type=\"file\"\r\n                                    id=\"file\"\r\n                                    className=\"form-control form-control-file\"\r\n                                    onChange={(event) => onImageChange(event.target.files[0])}\r\n                                    accept=\".xlsx, .xls, .csv, .pdf, image/*, application/gzip, .zip, .tar, .txt, .doc, .docx, .pptx, .ppt\"\r\n                                />\r\n                                <img\r\n                                    src={\"assets/icons/upload-thin.svg\"}\r\n                                    alt=\"\"\r\n                                    className=\"upload-icon\"\r\n                                // onClick={()=>{document.getElementById('file').click()}}\r\n                                />\r\n                            </CLabel>\r\n                        </div>\r\n                        {/**display uploaded files */}\r\n                        <div className=\"mb-3\">\r\n                            <div className=\"row\">\r\n                                {fileAvatars.map((file, idx) => (\r\n                                    <div key={idx} className=\"col-md-6 col-sm-6 col-lg-4\">\r\n                                        <div className=\"file-attached-ongoing rounded-pill\">\r\n                                            <CButton className=\"remove-file-ongoing\" type=\"button\" onClick={() => { remove_file(idx) }}>\r\n                                                <img\r\n                                                    src={\"assets/icons/icons8-close-64-blue.svg\"}\r\n                                                    className=\"close-icon-size\"\r\n                                                />\r\n                                            </CButton>\r\n                                            {files[idx].name}\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                        {/**Submit buttons */}\r\n                        {/* <div className=\"mb-3 mt-4\">\r\n                            <div className=\"project-form-button-holders \">\r\n                                <CButton className=\"profile-form-btn update-profile\" type=\"button\" onClick={upload}>Upload Documents</CButton>\r\n                                <CButton className=\"profile-form-btn cancel-update\">Cancel</CButton>\r\n                            </div>\r\n                        </div> */}\r\n\r\n                    </CContainer>\r\n                </CCardBody>\r\n            </CCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default WBSFileUpload;\r\n","import {\r\n  CContainer,\r\n  CRow,\r\n  CCol,\r\n  CCard,\r\n  CCardHeader,\r\n  CCardBody,\r\n  CForm,\r\n  CLabel,\r\n  CInput,\r\n  CButton,\r\n  CModal,\r\n  CModalBody,\r\n  CModalHeader,\r\n  CModalFooter,\r\n  CTextarea,\r\n} from \"@coreui/react\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { form, useFormik } from \"formik\";\r\nimport { API, USER_ID } from \"../../Config\";\r\nimport swal from \"sweetalert\";\r\nimport {\r\n  fetchProjectsAssigneeThunk,\r\n  fetchProjectsForPMThunk,\r\n  fetchProjectsThunk,\r\n} from \"../../store/slices/ProjectsSlice\";\r\nimport { fetchWbsThunk } from \"../../store/slices/WbsSlice\";\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport moment from \"moment\";\r\nimport { has_permission } from \"../../helper.js\";\r\nimport WBSFileUpload from \"../../components/wbs-docs-upload/WBSFileUpload\";\r\n\r\nconst WbsModal = (props) => {\r\n  console.log(\"props wbs modal: \", props);\r\n  const [deliverableView, setDeliverableView] = useState(true);\r\n  const [hrsWorked, setHrsWorked] = useState(true);\r\n  const [plannedHours, setPlannedHours] = useState();\r\n  const [actualHour, setactualHour] = useState();\r\n  const [remaininghrs, setremaininghrs] = useState();\r\n  const [datecheck, setdatecheck] = useState();\r\n  const [balancehrs, setbalancehrs] = useState();\r\n\r\n  const dispatch = useDispatch();\r\n  const wbsStatusArray = [\r\n    {\r\n      title: \"To Do\",\r\n      status: 1,\r\n    },\r\n    {\r\n      title: \"Ongoing\",\r\n      status: 2,\r\n    },\r\n    {\r\n      title: \"Done\",\r\n      status: 3,\r\n    },\r\n  ];\r\n\r\n  // const reset_form = () => {\r\n  //     formWbsUpdate.resetForm();\r\n  //     selectProjectRef.current.select.clearValue();\r\n  //     selectAssigneRef.current.select.clearValue();\r\n  //     selectTaskTitleRef.current.select.clearValue();\r\n  //     setAssigneeList([]);\r\n  //   };\r\n\r\n  React.useEffect(() => {\r\n    API.get(\r\n      \"project/assignee/list/\" + props.data.project.work_package_index + \"/\"\r\n    ).then((res) => {\r\n      let ep = 0;\r\n      for (let i = 0; i < res.data.data.length; i++) {\r\n        console.log(\"id\", res.data.data[i].assignee.id);\r\n        if (props.data.assignee.id == res.data.data[i].assignee.id) {\r\n          ep = res.data.data[i].estimated_person;\r\n        }\r\n      }\r\n\r\n      const start = props.data.project.start_date;\r\n      const end = props.data.project.planned_delivery_date;\r\n\r\n      const moment = require(\"moment\");\r\n      let total_days = moment(end).diff(moment(start), \"days\");\r\n      total_days = total_days + 1;\r\n\r\n      let total_hrs = total_days * 8;\r\n\r\n      const tomorrow = new Date(start);\r\n\r\n      let count = 0;\r\n      for (let i = 0; i < total_days; i++) {\r\n        tomorrow.setDate(tomorrow.getDate() + 1);\r\n\r\n        if (tomorrow.getDay() == 5 || tomorrow.getDay() == 6) {\r\n          count = count + 1;\r\n        }\r\n      }\r\n\r\n      count = count * 8;\r\n      total_hrs = total_hrs - count;\r\n\r\n      let total_spent = 0;\r\n      for (const item in props.timeCardList.data) {\r\n        total_spent += parseFloat(props.timeCardList.data[item].hours_today);\r\n      }\r\n\r\n      setactualHour(Number(total_spent).toFixed(2));\r\n\r\n      total_hrs = total_hrs * ep;\r\n      setPlannedHours(Number(total_hrs).toFixed(2));\r\n\r\n      setremaininghrs(Number(total_hrs - total_spent).toFixed(2));\r\n    });\r\n\r\n    const lastDate = props.data.end_date;\r\n\r\n    const currentDate = new Date();\r\n    const day = `${currentDate.getFullYear()}-${\r\n      currentDate.getMonth() + 1\r\n    }-${currentDate.getDate()}`;\r\n    const cday = day.split(\"-\");\r\n\r\n    const endDateArray = lastDate.split(\"-\");\r\n\r\n    const difference = moment(props.data.end_date, \"YYYY-MM-DD\").diff(\r\n      moment(currentDate, \"YYYY-MM-DD\"),\r\n      \"days\"\r\n    );\r\n\r\n    setdatecheck(difference);\r\n  }, [props]);\r\n\r\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n  const updateWbs = (data, { setSubmitting }) => {\r\n    if (datecheck >= 0) {\r\n      API.put(\"wbs/update/\" + props.data.id + \"/\", formWbsUpdate.values)\r\n        .then((res) => {\r\n          if (res.status == 200 && res.data.success == \"True\") {\r\n            dispatch(fetchProjectsForPMThunk(sessionStorage.getItem(USER_ID)));\r\n            dispatch(fetchProjectsThunk(sessionStorage.getItem(USER_ID)));\r\n            dispatch(fetchWbsThunk(sessionStorage.getItem(USER_ID)));\r\n            swal({\r\n              title: \"Good job! WBS updated successfully!\",\r\n              text: \"\",\r\n              icon: \"success\",\r\n            });\r\n            props.onClose();\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    } else {\r\n      setSubmitting(false);\r\n      enqueueSnackbar(\"Planned Delivery date is over! \", {\r\n        variant: \"warning\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const validateWbsCreateForm = (values) => {\r\n    const errors = {};\r\n    if (!values.title) errors.title = \"Title is required!\";\r\n    if (!values.actual_work_done)\r\n      errors.actual_work_done =\r\n        \"Actual work done today is required! (250 charracters)\";\r\n    return errors;\r\n  };\r\n  const [files, setFiles] = useState([]);\r\n  const setDocFiles = (files) => {\r\n    setFiles(files);\r\n  };\r\n  const formWbsUpdate = useFormik({\r\n    initialValues: {\r\n      project: props.data.project.id,\r\n      assignee: props.data.assignee.id,\r\n      title: props.data.title,\r\n      details: props.data.project.description,\r\n      status: props.data.status,\r\n      description: props.data.description,\r\n      start_date: props.data.start_date,\r\n      end_date: props.data.end_date,\r\n      hours_worked: props.data.hours_worked,\r\n      progress: props.data.progress,\r\n      comments: props.data.comments,\r\n      deliverable: props.data.deliverable,\r\n      date_updated: \"\",\r\n      actual_work_done: \"\",\r\n      remaining_hours: \"\",\r\n    },\r\n    validateOnChange: true,\r\n    validateOnBlur: true,\r\n    validate: validateWbsCreateForm,\r\n    onSubmit: updateWbs,\r\n  });\r\n\r\n  // const total_hours = () => {\r\n  //   console.log(\"ep\", props.data);\r\n  //   const start = props.data.start_date;\r\n  //   const end = props.data.end_date;\r\n\r\n  //   const moment = require(\"moment\");\r\n  //   const total_days = moment(end).diff(moment(start), \"days\");\r\n\r\n  //   console.log(\"dddddddd\", total_days);\r\n\r\n  //   let total_hrs = total_days * 24;\r\n\r\n  //   console.log(\"11111\", total_hrs);\r\n  //   console.log(\"1\", end);\r\n\r\n  //   const startd = new Date(start).toString();\r\n  //   console.log(\"string\", startd);\r\n  //   const tomorrow = new Date(start);\r\n\r\n  //   let count = 0;\r\n  //   for (let i = 0; i < total_days; i++) {\r\n  //     tomorrow.setDate(tomorrow.getDate() + 1);\r\n  //     if (tomorrow.getDay() == 5 || tomorrow.getDay() == 6) {\r\n  //       count = count + 1;\r\n  //     }\r\n  //   }\r\n  //   count = count * 24;\r\n  //   total_hrs = total_hrs - count;\r\n\r\n  //   let total_spent = 0;\r\n  //   for (const item in props.timeCardList.data) {\r\n  //     console.log(\"input hours\", props.timeCardList.data[item].hours_today);\r\n\r\n  //     total_spent += parseFloat(props.timeCardList.data[item].hours_today);\r\n  //   }\r\n  //   console.log(\"spent\", total_spent);\r\n  //   //setactualHour(Number(total_spent).toFixed(2));\r\n\r\n  //   const remaining_hrs = plannedHours - total_spent;\r\n  //   const hours = {\r\n  //     allocated_hours: total_hrs,\r\n  //     spent_hours: total_spent,\r\n  //     remaining_hours: remaining_hrs,\r\n  //   };\r\n  //   return hours;\r\n  // };\r\n\r\n  function is_form_submitting() {\r\n    console.log(formWbsUpdate.isSubmitting, formWbsUpdate.isValidating);\r\n    //total_hours();\r\n    if (formWbsUpdate.isSubmitting && !formWbsUpdate.isValidating) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function handleUpdate(){\r\n    formWbsUpdate.handleSubmit()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CModal\r\n        closeOnBackdrop={false}\r\n        show={props.show}\r\n        onClose={props.toggle}\r\n        size=\"xl\"\r\n      >\r\n        <CModalHeader closeButton>\r\n          {props.data.project &&\r\n            props.data.project.task_delivery_order.title + \" / \"}\r\n          {props.data.project && props.data.project.sub_task + \" / \"}\r\n          {props.data.project && props.data.project.task_title}\r\n        </CModalHeader>\r\n        <CModalBody>\r\n          <CRow>\r\n            <div className=\"col-lg-8 mb-3 border-right\">\r\n              <CForm>\r\n                <CRow>\r\n                  <div className=\"col-lg-12 mb-3\">\r\n                    <p>\r\n                      <b>Project Details :</b> {props.data.project.description}\r\n                    </p>\r\n                  </div>\r\n                </CRow>\r\n                <CRow>\r\n                  <div className=\"col-lg-12 mb-3\">\r\n                    <CLabel className=\"custom-label-wbs5\">Title</CLabel>\r\n                    <CInput\r\n                      id=\"title\"\r\n                      name=\"title\"\r\n                      className=\"custom-forminput-5\"\r\n                      onChange={formWbsUpdate.handleChange}\r\n                      value={formWbsUpdate.values.title}\r\n                      \r\n                    />\r\n                    \r\n                    {formWbsUpdate.errors.title && (\r\n                      <p\r\n                        className=\"error\"\r\n                        style={{ fontSize: \"14px !important\" }}\r\n                      >\r\n                        {formWbsUpdate.errors.title}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n                </CRow>\r\n                <CRow>\r\n                  <div className=\"col-md-12 mb-3\">\r\n                    <CLabel className=\"custom-label-wbs5\">Description</CLabel>\r\n                    <CTextarea\r\n                      maxlength=\"300\"\r\n                      id=\"description\"\r\n                      name=\"description\"\r\n                      className=\"custom-forminput-5 text-box-height\"\r\n                      onChange={formWbsUpdate.handleChange}\r\n                      value={formWbsUpdate.values.description}\r\n                    ></CTextarea>\r\n                    <div className=\"float-right\">\r\n                      {formWbsUpdate.values.description.length}/300\r\n                    </div>\r\n                  </div>\r\n                </CRow>\r\n                <CRow>\r\n                  {has_permission(\"projects.add_projects\") && (\r\n                    <div className=\"col-lg-6 mb-3\">\r\n                      <CLabel className=\"custom-label-wbs5\">Start date</CLabel>\r\n                      <CInput\r\n                        id=\"start_date\"\r\n                        name=\"start_date\"\r\n                        type=\"date\"\r\n                        className=\"custom-forminput-5\"\r\n                        onChange={formWbsUpdate.handleChange}\r\n                        value={formWbsUpdate.values.start_date}\r\n                      ></CInput>\r\n                    </div>\r\n                  )}\r\n                  {has_permission(\"projects.add_projects\") && (\r\n                    <div className=\"col-lg-6 mb-3\">\r\n                      <CLabel className=\"custom-label-wbs5\">End date</CLabel>\r\n                      <CInput\r\n                        id=\"end_date\"\r\n                        name=\"end_date\"\r\n                        type=\"date\"\r\n                        className=\"custom-forminput-5\"\r\n                        onChange={formWbsUpdate.handleChange}\r\n                        value={formWbsUpdate.values.end_date}\r\n                        // disabled\r\n                      ></CInput>\r\n                    </div>\r\n                  )}\r\n\r\n                  {!has_permission(\"projects.add_projects\") && (\r\n                    <div className=\"col-lg-6 mb-3\">\r\n                      <CLabel className=\"custom-label-wbs5\">Start date</CLabel>\r\n                      <CInput\r\n                        id=\"start_date\"\r\n                        name=\"start_date\"\r\n                        type=\"date\"\r\n                        className=\"custom-forminput-5\"\r\n                        onChange={formWbsUpdate.handleChange}\r\n                        value={formWbsUpdate.values.start_date}\r\n                        disabled\r\n                      ></CInput>\r\n                    </div>\r\n                  )}\r\n                  {!has_permission(\"projects.add_projects\") && (\r\n                    <div className=\"col-lg-6 mb-3\">\r\n                      <CLabel className=\"custom-label-wbs5\">End date</CLabel>\r\n                      <CInput\r\n                        id=\"end_date\"\r\n                        name=\"end_date\"\r\n                        type=\"date\"\r\n                        className=\"custom-forminput-5\"\r\n                        onChange={formWbsUpdate.handleChange}\r\n                        value={formWbsUpdate.values.end_date}\r\n                        disabled\r\n                      ></CInput>\r\n                    </div>\r\n                  )}\r\n                </CRow>\r\n                {/*Actual work today */}\r\n                <CRow>\r\n                  <div className=\"col-lg-12 mb-3\">\r\n                    <CLabel className=\"custom-label-wbs5\">\r\n                      Actual Work Today\r\n                    </CLabel>\r\n                    <CInput\r\n                      id=\"actual_work_done\"\r\n                      type=\"text\"\r\n                      name=\"actual_work_done\"\r\n                      className=\"custom-forminpput-5\"\r\n                      onChange={(e) => {\r\n                        formWbsUpdate.setFieldValue(\r\n                          \"actual_work_done\",\r\n                          e.target.value\r\n                        );\r\n                        if (\r\n                          e.target.value == null ||\r\n                          e.target.value.length == 0\r\n                        ) {\r\n                          setHrsWorked(true);\r\n                        } else {\r\n                          setHrsWorked(false);\r\n                        }\r\n                      }}\r\n                      value={formWbsUpdate.values.actual_work_done}\r\n                    ></CInput>\r\n                    {formWbsUpdate.errors.actual_work_done && (\r\n                      <p\r\n                        className=\"error\"\r\n                        style={{ fontSize: \"14px !important\" }}\r\n                      >\r\n                        {formWbsUpdate.errors.actual_work_done}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n                </CRow>\r\n                <CRow>\r\n                  <div className=\"col-lg-12 mb-3\">\r\n                    <CLabel className=\"custom-label-wbs5\">Hours worked</CLabel>\r\n                    <CInput\r\n                      id=\"hours_worked\"\r\n                      name=\"hours_worked\"\r\n                      type=\"number\"\r\n                      className=\"custom-forminput-5\"\r\n                      onChange={formWbsUpdate.handleChange}\r\n                      value={formWbsUpdate.values.hours_worked}\r\n                      disabled={hrsWorked}\r\n                      min=\"0.00\"\r\n                    ></CInput>\r\n                  </div>\r\n                </CRow>\r\n                <CRow>\r\n                  <div className=\"col-lg-12 mb-3\">\r\n                    <CLabel className=\"custom-label-wbs5\">Comments</CLabel>\r\n                    <CTextarea\r\n                      maxLength='200'\r\n                      id=\"comments\"\r\n                      name=\"comments\"\r\n                      className=\"custom-forminput-5\"\r\n                      onChange={formWbsUpdate.handleChange}\r\n                      value={formWbsUpdate.values.comments}\r\n                    ></CTextarea>\r\n                    <div className=\"float-right\">\r\n                      {formWbsUpdate.values.comments.length}/200\r\n                    </div>\r\n                  </div>\r\n                </CRow>\r\n                <CRow>\r\n                  <div className=\"col-lg-12\">\r\n                    <WBSFileUpload files={files} setFiles={setDocFiles} />\r\n                  </div>\r\n                </CRow>\r\n                {props.data.assignee.id == sessionStorage.getItem(USER_ID) && (\r\n                  <div>\r\n                    {is_form_submitting() == true ? (\r\n                      <LinearProgress />\r\n                    ) : (\r\n                      <div>\r\n                        {props.data.status != 3 && props.data.status != 4 && (\r\n                          <CButton\r\n                            type=\"button\"\r\n                             //onClick= {handleUpdate()}\r\n                            onClick={formWbsUpdate.handleSubmit}\r\n                            color=\"primary\"\r\n                          >\r\n                            Update\r\n                          </CButton>\r\n                        )}{\" \"}\r\n                        <CButton color=\"secondary\" onClick={props.toggle}>\r\n                          Cancel\r\n                        </CButton>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </CForm>\r\n            </div>\r\n\r\n            <CRow className=\"col-lg-4 mb-3\">\r\n              <div>\r\n                <CCol md=\"12\">\r\n                  <p>\r\n                    Assignee:\r\n                    <br></br>\r\n                    {/* Pial Noman */}\r\n                    <span className=\"wbs-reporter-name\">\r\n                      {props.data.assignee?.first_name != undefined &&\r\n                        props.data.assignee.first_name +\r\n                          \" \" +\r\n                          props.data.assignee.last_name}\r\n                    </span>\r\n                  </p>\r\n                </CCol>\r\n                <CCol md=\"12\">\r\n                  <p>\r\n                    Created By:\r\n                    <br></br>\r\n                    {/* Pial Noman */}\r\n                    <span className=\"wbs-reporter-name\">\r\n                      {props.data.reporter?.first_name != undefined &&\r\n                        props.data.reporter.first_name +\r\n                          \" \" +\r\n                          props.data.reporter.last_name}\r\n                    </span>\r\n                  </p>\r\n                </CCol>\r\n                <CCol md=\"12\">\r\n                  <p className=\"custom-label-wbs5\">\r\n                    Planned Hours :<br></br>\r\n                    {Number(parseFloat(plannedHours)).toFixed(2)}\r\n                  </p>\r\n                </CCol>\r\n                <CCol md=\"12\">\r\n                  <p>\r\n                    Actual Hours :<br></br>\r\n                    {Number(actualHour).toFixed(2)}\r\n                  </p>\r\n                </CCol>\r\n                <CCol md=\"12\">\r\n                  <p>\r\n                    Balance hours:\r\n                    <br></br>\r\n                    {remaininghrs == null ? (\r\n                      <LinearProgress />\r\n                    ) : (\r\n                      Number(remaininghrs).toFixed(2)\r\n                    )}\r\n                  </p>\r\n                </CCol>\r\n                {/**actual work list show */}\r\n                <CCol md=\"12\">\r\n                  <div className=\"task-list\">\r\n                    <p>Actual Worked :</p>\r\n                    <ol className=\"task-list-show\">\r\n                      {props.timeCardList?.data != undefined\r\n                        ? Array.from(props.timeCardList.data).map((item) => (\r\n                            <li className=\"task-list-show-item\">\r\n                              {item.actual_work_done +\r\n                                \" ➤ \" +\r\n                                Number(item.hours_today).toFixed(2) +\r\n                                \" hr(s)\"}\r\n                                <p>@ {item.date_updated} </p>\r\n                            </li>\r\n                          ))\r\n                        : \"No task has been done so far.\"}\r\n                    </ol>\r\n                  </div>\r\n                </CCol>\r\n              </div>\r\n            </CRow>\r\n          </CRow>\r\n        </CModalBody>\r\n      </CModal>\r\n    </>\r\n  );\r\n};\r\nexport default WbsModal;\r\n"],"sourceRoot":""}